class { 'Cluster::Neutron::Metadata' :
  primary => true,
  require => Class[Cluster::Neutron],
}

class { 'Cluster::Neutron' :
}

class { 'Neutron::Agents::Metadata' :
  auth_insecure             => false,
  auth_password             => 'XgdPodA7',
  auth_region               => 'RegionOne',
  auth_tenant               => 'services',
  auth_url                  => 'http://192.168.0.7:35357/v2.0',
  auth_user                 => 'neutron',
  debug                     => false,
  enabled                   => true,
  manage_service            => true,
  metadata_backlog          => '4096',
  metadata_ip               => '192.168.0.7',
  metadata_memory_cache_ttl => '5',
  metadata_port             => '8775',
  metadata_protocol         => 'http',
  metadata_workers          => '4',
  package_ensure            => 'present',
  shared_secret             => 'QU11ydS2',
}

class { 'Neutron::Params' :
}

class { 'Neutron' :
}

cluster::corosync::cs_service { 'neutron-metadata-agent' :
  csr_complex_type => 'clone',
  csr_mon_intr     => '60',
  csr_mon_timeout  => '10',
  csr_ms_metadata  => { 'interleave' => 'true' },
  csr_timeout      => '30',
  hasrestart       => true,
  ocf_script       => 'ocf-neutron-metadata-agent',
  primary          => true,
  service_name     => 'neutron-metadata-agent',
  service_title    => 'neutron-metadata',
}

cs_resource { 'p_neutron-metadata-agent' :
  ensure          => 'present',
  before          => 'Service[neutron-metadata]',
  complex_type    => 'clone',
  ms_metadata     => { 'interleave' => 'true' },
  operations      => { 'monitor' => { 'interval' => '60', 'timeout' => '10' }, 'start' => { 'timeout' => '30' }, 'stop' => { 'timeout' => '30' } },
  primitive_class => 'ocf',
  primitive_type  => 'ocf-neutron-metadata-agent',
  provided_by     => 'fuel',
}

file { '/var/cache/neutron' :
  ensure => 'directory',
  group  => 'neutron',
  mode   => '0755',
  owner  => 'neutron',
  path   => '/var/cache/neutron',
}

neutron_metadata_agent_config { 'DEFAULT/admin_password' :
  notify => 'Service[neutron-metadata]',
  secret => true,
  value  => 'XgdPodA7',
}

neutron_metadata_agent_config { 'DEFAULT/admin_tenant_name' :
  notify => 'Service[neutron-metadata]',
  value  => 'services',
}

neutron_metadata_agent_config { 'DEFAULT/admin_user' :
  notify => 'Service[neutron-metadata]',
  value  => 'neutron',
}

neutron_metadata_agent_config { 'DEFAULT/auth_ca_cert' :
  ensure => 'absent',
  notify => 'Service[neutron-metadata]',
}

neutron_metadata_agent_config { 'DEFAULT/auth_insecure' :
  notify => 'Service[neutron-metadata]',
  value  => false,
}

neutron_metadata_agent_config { 'DEFAULT/auth_region' :
  notify => 'Service[neutron-metadata]',
  value  => 'RegionOne',
}

neutron_metadata_agent_config { 'DEFAULT/auth_url' :
  notify => 'Service[neutron-metadata]',
  value  => 'http://192.168.0.7:35357/v2.0',
}

neutron_metadata_agent_config { 'DEFAULT/cache_url' :
  notify => 'Service[neutron-metadata]',
  value  => 'memory://?default_ttl=5',
}

neutron_metadata_agent_config { 'DEFAULT/debug' :
  notify => 'Service[neutron-metadata]',
  value  => false,
}

neutron_metadata_agent_config { 'DEFAULT/metadata_backlog' :
  notify => 'Service[neutron-metadata]',
  value  => '4096',
}

neutron_metadata_agent_config { 'DEFAULT/metadata_proxy_shared_secret' :
  notify => 'Service[neutron-metadata]',
  value  => 'QU11ydS2',
}

neutron_metadata_agent_config { 'DEFAULT/metadata_workers' :
  notify => 'Service[neutron-metadata]',
  value  => '4',
}

neutron_metadata_agent_config { 'DEFAULT/nova_metadata_ip' :
  notify => 'Service[neutron-metadata]',
  value  => '192.168.0.7',
}

neutron_metadata_agent_config { 'DEFAULT/nova_metadata_port' :
  notify => 'Service[neutron-metadata]',
  value  => '8775',
}

neutron_metadata_agent_config { 'DEFAULT/nova_metadata_protocol' :
  notify => 'Service[neutron-metadata]',
  value  => 'http',
}

override_resources { 'neutron_metadata_agent_config' :
  data => { 'DEFAULT/debug' => { 'value' => true } },
}

package { 'lsof' :
}

package { 'neutron' :
  ensure => 'installed',
  before => 'File[/var/cache/neutron]',
  name   => 'binutils',
  notify => 'Service[neutron-metadata]',
}

service { 'neutron-metadata' :
  ensure     => 'running',
  enable     => true,
  hasrestart => true,
  hasstatus  => true,
  name       => 'neutron-metadata-agent',
  provider   => 'pacemaker',
  require    => Class[Neutron],
  tag        => 'neutron-service',
}

stage { 'main' :
}


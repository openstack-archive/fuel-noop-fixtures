class { 'Cluster::Neutron::Ovs' :
  plugin_config => '/etc/neutron/plugin.ini',
  primary       => true,
  require       => Class[Cluster::Neutron],
}

class { 'Cluster::Neutron' :
}

class { 'Neutron::Agents::Ml2::Ovs' :
  arp_responder              => true,
  bridge_mappings            => 'physnet1:br-floating',
  bridge_uplinks             => [  ],
  drop_flows_on_start        => false,
  enable_distributed_routing => true,
  enable_tunneling           => true,
  enabled                    => true,
  extensions                 => [  ],
  firewall_driver            => 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver',
  integration_bridge         => 'br-int',
  l2_population              => true,
  local_ip                   => '192.168.0.2',
  manage_service             => true,
  manage_vswitch             => false,
  package_ensure             => 'present',
  polling_interval           => '2',
  prevent_arp_spoofing       => true,
  tunnel_bridge              => 'br-tun',
  tunnel_types               => 'vxlan',
  vxlan_udp_port             => '4789',
}

class { 'Neutron::Db::Sync' :
}

class { 'Neutron::Params' :
}

class { 'Neutron::Plugins::Ml2' :
  enable_security_group     => true,
  extension_drivers         => 'port_security',
  flat_networks             => '*',
  mechanism_drivers         => [ 'openvswitch', 'l2population' ],
  network_vlan_ranges       => 'physnet1',
  package_ensure            => 'present',
  path_mtu                  => '1450',
  physical_network_mtus     => [  ],
  sriov_agent_required      => false,
  supported_pci_vendor_devs => [ '15b3:1004', '8086:10ca' ],
  tenant_network_types      => [ 'flat', 'vxlan' ],
  tunnel_id_ranges          => '2:65535',
  type_drivers              => [ 'local', 'flat', 'vlan', 'gre', 'vxlan' ],
  vni_ranges                => '2:65535',
  vxlan_group               => '224.0.0.1',
}

class { 'Neutron' :
}

cluster::corosync::cs_service { 'ovs' :
  csr_complex_type => 'clone',
  csr_mon_intr     => '20',
  csr_mon_timeout  => '10',
  csr_ms_metadata  => { 'interleave' => 'true' },
  csr_parameters   => { 'plugin_config' => '/etc/neutron/plugin.ini' },
  csr_timeout      => '80',
  hasrestart       => false,
  ocf_script       => 'ocf-neutron-ovs-agent',
  package_name     => 'openstack-neutron',
  primary          => true,
  service_name     => 'neutron-openvswitch-agent',
  service_title    => 'neutron-ovs-agent-service',
}

cs_resource { 'p_neutron-openvswitch-agent' :
  ensure          => 'present',
  before          => 'Service[neutron-ovs-agent-service]',
  complex_type    => 'clone',
  ms_metadata     => { 'interleave' => 'true' },
  operations      => { 'monitor' => { 'interval' => '20', 'timeout' => '10' }, 'start' => { 'timeout' => '80' }, 'stop' => { 'timeout' => '80' } },
  parameters      => { 'plugin_config' => '/etc/neutron/plugin.ini' },
  primitive_class => 'ocf',
  primitive_type  => 'ocf-neutron-ovs-agent',
  provided_by     => 'fuel',
}

exec { 'neutron-db-sync' :
  command     => 'neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini upgrade head',
  logoutput   => 'on_failure',
  notify      => [ 'Service[neutron-ovs-agent-service]', 'Service[neutron-server]' ],
  path        => '/usr/bin',
  refreshonly => true,
}

exec { 'waiting-for-neutron-api' :
  command     => 'neutron net-list --http-timeout=4 2>&1 > /dev/null',
  environment => [ 'OS_TENANT_NAME=services', 'OS_USERNAME=neutron', 'OS_PASSWORD=oT56DSZF', 'OS_AUTH_URL=http://192.168.0.2:5000/v2.0', 'OS_REGION_NAME=RegionOne', 'OS_ENDPOINT_TYPE=internalURL' ],
  path        => '/usr/sbin:/usr/bin:/sbin:/bin',
  provider    => 'shell',
  tries       => '30',
  try_sleep   => '4',
}

file { '/etc/default/neutron-server' :
  ensure => 'present',
  group  => 'root',
  mode   => '0644',
  owner  => 'root',
}

file { '/etc/neutron/plugin.ini' :
  ensure => 'link',
  target => '/etc/neutron/plugins/ml2/ml2_conf.ini',
}

file { '/var/cache/neutron' :
  ensure => 'directory',
  group  => 'neutron',
  mode   => '0755',
  owner  => 'neutron',
  path   => '/var/cache/neutron',
}

neutron::plugins::ml2::mech_driver { 'l2population' :
  sriov_agent_required      => false,
  supported_pci_vendor_devs => [ '15b3:1004', '8086:10ca' ],
}

neutron::plugins::ml2::mech_driver { 'openvswitch' :
  sriov_agent_required      => false,
  supported_pci_vendor_devs => [ '15b3:1004', '8086:10ca' ],
}

neutron::plugins::ml2::type_driver { 'flat' :
  flat_networks       => '*',
  network_vlan_ranges => 'physnet1',
  tunnel_id_ranges    => '2:65535',
  vni_ranges          => '2:65535',
  vxlan_group         => '224.0.0.1',
}

neutron::plugins::ml2::type_driver { 'gre' :
  flat_networks       => '*',
  network_vlan_ranges => 'physnet1',
  tunnel_id_ranges    => '2:65535',
  vni_ranges          => '2:65535',
  vxlan_group         => '224.0.0.1',
}

neutron::plugins::ml2::type_driver { 'local' :
  flat_networks       => '*',
  network_vlan_ranges => 'physnet1',
  tunnel_id_ranges    => '2:65535',
  vni_ranges          => '2:65535',
  vxlan_group         => '224.0.0.1',
}

neutron::plugins::ml2::type_driver { 'vlan' :
  flat_networks       => '*',
  network_vlan_ranges => 'physnet1',
  tunnel_id_ranges    => '2:65535',
  vni_ranges          => '2:65535',
  vxlan_group         => '224.0.0.1',
}

neutron::plugins::ml2::type_driver { 'vxlan' :
  flat_networks       => '*',
  network_vlan_ranges => 'physnet1',
  tunnel_id_ranges    => '2:65535',
  vni_ranges          => '2:65535',
  vxlan_group         => '224.0.0.1',
}

neutron_agent_ovs { 'agent/arp_responder' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => true,
}

neutron_agent_ovs { 'agent/drop_flows_on_start' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => false,
}

neutron_agent_ovs { 'agent/enable_distributed_routing' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => true,
}

neutron_agent_ovs { 'agent/l2_population' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => true,
}

neutron_agent_ovs { 'agent/polling_interval' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => '2',
}

neutron_agent_ovs { 'agent/prevent_arp_spoofing' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => true,
}

neutron_agent_ovs { 'agent/tunnel_types' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => 'vxlan',
}

neutron_agent_ovs { 'agent/vxlan_udp_port' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => '4789',
}

neutron_agent_ovs { 'ovs/bridge_mappings' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => 'physnet1:br-floating',
}

neutron_agent_ovs { 'ovs/enable_tunneling' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => true,
}

neutron_agent_ovs { 'ovs/integration_bridge' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => 'br-int',
}

neutron_agent_ovs { 'ovs/local_ip' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => '192.168.0.2',
}

neutron_agent_ovs { 'ovs/tunnel_bridge' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => 'br-tun',
}

neutron_agent_ovs { 'securitygroup/firewall_driver' :
  notify => 'Service[neutron-ovs-agent-service]',
  value  => 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver',
}

neutron_plugin_ml2 { 'ml2/extension_drivers' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => 'port_security',
}

neutron_plugin_ml2 { 'ml2/mechanism_drivers' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => 'openvswitch,l2population',
}

neutron_plugin_ml2 { 'ml2/path_mtu' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => '1450',
}

neutron_plugin_ml2 { 'ml2/physical_network_mtus' :
  ensure => 'absent',
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
}

neutron_plugin_ml2 { 'ml2/tenant_network_types' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => 'flat,vxlan',
}

neutron_plugin_ml2 { 'ml2/type_drivers' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => 'local,flat,vlan,gre,vxlan',
}

neutron_plugin_ml2 { 'ml2_type_flat/flat_networks' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => '*',
}

neutron_plugin_ml2 { 'ml2_type_gre/tunnel_id_ranges' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => '2:65535',
}

neutron_plugin_ml2 { 'ml2_type_vlan/network_vlan_ranges' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => 'physnet1',
}

neutron_plugin_ml2 { 'ml2_type_vxlan/vni_ranges' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => '2:65535',
}

neutron_plugin_ml2 { 'ml2_type_vxlan/vxlan_group' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => '224.0.0.1',
}

neutron_plugin_ml2 { 'securitygroup/enable_security_group' :
  notify => [ 'Service[neutron-server]', 'Exec[neutron-db-sync]' ],
  value  => true,
}

override_resources { 'neutron_agent_ovs' :
  data => { 'agent/polling_interval' => { 'value' => '15' } },
}

override_resources { 'neutron_plugin_ml2' :
  data => { 'test/polling_interval' => { 'value' => '10' } },
}

package { 'lsof' :
}

package { 'neutron-ovs-agent' :
  ensure => 'present',
  before => 'Service[ovs-cleanup-service]',
  name   => 'openstack-neutron-openvswitch',
  notify => [ 'Service[neutron-ovs-agent-service]', 'Exec[neutron-db-sync]' ],
  tag    => [ 'openstack', 'neutron-package' ],
}

package { 'neutron-plugin-ml2' :
  ensure => 'present',
  before => [ 'File[/etc/neutron/plugin.ini]', 'File[/etc/default/neutron-server]' ],
  name   => 'openstack-neutron-ml2',
  tag    => 'openstack',
}

package { 'neutron' :
  ensure => 'installed',
  before => 'File[/var/cache/neutron]',
  name   => 'binutils',
  notify => 'Service[neutron-ovs-agent-service]',
}

service { 'neutron-ovs-agent-service' :
  ensure     => 'running',
  enable     => true,
  hasrestart => false,
  hasstatus  => true,
  name       => 'neutron-openvswitch-agent',
  provider   => 'pacemaker',
  require    => Class[Neutron],
  tag        => 'neutron-service',
}

service { 'neutron-server' :
  ensure     => 'running',
  before     => 'Exec[waiting-for-neutron-api]',
  enable     => true,
  hasrestart => true,
  hasstatus  => true,
  name       => 'neutron-server',
  tag        => 'neutron-service',
}

service { 'ovs-cleanup-service' :
  enable => true,
  name   => 'neutron-ovs-cleanup',
}

stage { 'main' :
}

tweaks::ubuntu_service_override { 'neutron-openvswitch-agent' :
  before       => 'Service[neutron-ovs-agent-service]',
  package_name => 'openstack-neutron',
  service_name => 'neutron-openvswitch-agent',
}


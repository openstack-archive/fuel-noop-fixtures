anchor { 'cobbler-begin' :
  before => 'Class[Cobbler::Packages]',
}

anchor { 'cobbler-end' :
}

anchor { 'nailgun-cobbler-begin' :
  before => 'Class[Cobbler]',
}

anchor { 'nailgun-cobbler-end' :
}

class { 'Cobbler::Packages' :
  before => 'Class[Cobbler::Selinux]',
}

class { 'Cobbler::Selinux' :
  before => 'Class[Cobbler::Snippets]',
}

class { 'Cobbler::Server' :
  before         => 'Anchor[cobbler-end]',
  dhcp_gateway   => '10.109.0.1',
  dhcp_lease_max => '1800',
  dns_domain     => 'test.domain.local',
  dns_search     => 'test.domain.local',
  dns_upstream   => '10.109.0.1',
  domain_name    => 'local',
  lease_time     => '120m',
  production     => 'docker',
}

class { 'Cobbler::Snippets' :
  before => 'Class[Cobbler::Server]',
}

class { 'Cobbler' :
  before             => 'Anchor[nailgun-cobbler-end]',
  cobbler_password   => '0mMXE4t8',
  cobbler_user       => 'cobbler',
  dhcp_end_address   => '10.109.0.254',
  dhcp_gateway       => '10.109.0.1',
  dhcp_interface     => 'eth0',
  dhcp_netmask       => '255.255.255.0',
  dhcp_start_address => '10.109.0.3',
  dns_domain         => 'test.domain.local',
  dns_search         => 'test.domain.local',
  dns_upstream       => '10.109.0.1',
  domain_name        => 'local',
  name_server        => '10.109.0.2',
  next_server        => '10.109.0.2',
  production         => 'docker',
  pxetimeout         => '50',
  server             => '10.109.0.2',
}

class { 'Docker::Container' :
  tz           => 'UTC',
  yum_retries  => '5',
  yum_timeout  => '5',
  zoneinfo_dir => '/usr/share/zoneinfo',
}

class { 'Nailgun::Cobbler' :
  bootstrap_ethdevice_timeout => '120',
  bootstrap_flavor            => 'centos',
  bootstrap_meta              => {  },
  bootstrap_path              => '/var/www/nailgun/bootstraps/active_bootstrap',
  centos_repos                => { 'id' => 'nailgun', 'name' => 'Nailgun', 'url' => '$tree' },
  cobbler_password            => '0mMXE4t8',
  cobbler_user                => 'cobbler',
  dhcp_end_address            => '10.109.0.254',
  dhcp_gateway                => '10.109.0.1',
  dhcp_interface              => 'eth0',
  dhcp_netmask                => '255.255.255.0',
  dhcp_start_address          => '10.109.0.3',
  dns_domain                  => 'test.domain.local',
  dns_search                  => 'test.domain.local',
  dns_upstream                => '10.109.0.1',
  gem_source                  => 'http://10.109.0.2:8080/gems/',
  ks_encrypted_root_password  => '\$6\$tCD3X7ji\$1urw6qEMDkVxOkD33b4TpQAjRiCeDZx0jmgMhDYhfB9KuGfqO9OcMaKyUxnGGWslEDQ4HxTw7vcAMP85NxQe61',
  ks_system_timezone          => 'Etc/UTC',
  mco_pass                    => 'PPMi1XT2',
  mco_user                    => 'mcollective',
  nailgun_api_url             => 'http://10.109.0.2:8000/api',
  name_server                 => '10.109.0.2',
  next_server                 => '10.109.0.2',
  production                  => 'docker',
  server                      => '10.109.0.2',
}

cobbler::packages::cobbler_safe_package { 'bind-utils' :
}

cobbler::packages::cobbler_safe_package { 'fence-agents' :
}

cobbler::packages::cobbler_safe_package { 'python-ipaddr' :
}

cobbler::packages::cobbler_safe_package { 'syslinux' :
}

cobbler::packages::cobbler_safe_package { 'tftp-server' :
}

cobbler::packages::cobbler_safe_package { 'wget' :
}

cobbler::packages::cobbler_safe_package { 'xinetd' :
}

cobbler::snippets::cobbler_snippet { 'anaconda_ssh_console' :
}

cobbler::snippets::cobbler_snippet { 'anaconda_yum' :
}

cobbler::snippets::cobbler_snippet { 'centos_authorized_keys' :
}

cobbler::snippets::cobbler_snippet { 'centos_blacklist_i2c_piix4' :
}

cobbler::snippets::cobbler_snippet { 'centos_ofed_prereq_pkgs_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'centos_pkg_kernel_lt_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'centos_post_kernel_lt_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'centos_static_net' :
}

cobbler::snippets::cobbler_snippet { 'cinder_create_lvm_group' :
}

cobbler::snippets::cobbler_snippet { 'cinder_create_lvm_group__ubuntu' :
}

cobbler::snippets::cobbler_snippet { 'disable_pxe' :
}

cobbler::snippets::cobbler_snippet { 'kickstart_ntp' :
}

cobbler::snippets::cobbler_snippet { 'mcollective_conf' :
}

cobbler::snippets::cobbler_snippet { 'mcollective_install_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'nailgun_repo' :
}

cobbler::snippets::cobbler_snippet { 'ntp_register_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'ntp_to_masternode' :
}

cobbler::snippets::cobbler_snippet { 'ntp_to_masternode_ubuntu' :
}

cobbler::snippets::cobbler_snippet { 'ofed_install_with_sriov' :
}

cobbler::snippets::cobbler_snippet { 'post_install_network_config' :
}

cobbler::snippets::cobbler_snippet { 'post_install_network_config_fuel' :
}

cobbler::snippets::cobbler_snippet { 'post_part_compute' :
}

cobbler::snippets::cobbler_snippet { 'post_part_controller' :
}

cobbler::snippets::cobbler_snippet { 'post_part_storage' :
}

cobbler::snippets::cobbler_snippet { 'pre_install_network_config' :
}

cobbler::snippets::cobbler_snippet { 'pre_install_partition' :
}

cobbler::snippets::cobbler_snippet { 'pre_install_partition_lvm' :
}

cobbler::snippets::cobbler_snippet { 'puppet_conf' :
}

cobbler::snippets::cobbler_snippet { 'puppet_install_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'puppet_register_if_enabled' :
}

cobbler::snippets::cobbler_snippet { 'puppet_register_if_enabled_fuel' :
}

cobbler::snippets::cobbler_snippet { 'send2syslog' :
}

cobbler::snippets::cobbler_snippet { 'ssh_disable_gssapi' :
}

cobbler::snippets::cobbler_snippet { 'sshd_auth_pubkey_only' :
}

cobbler::snippets::cobbler_snippet { 'target_logs_to_master' :
}

cobbler::snippets::cobbler_snippet { 'target_logs_to_master_ubuntu' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_authorized_keys' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_blacklist_i2c_piix4' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_disable_pxe' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_mcollective_config' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_network' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_network_console_and_syslog' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_partition' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_partition_late' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_precise_packages_late' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_puppet_config' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_remove_repos_late' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_repos_late' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_static_net' :
}

cobbler::snippets::cobbler_snippet { 'ubuntu_trusty_packages_late' :
}

cobbler::snippets::cobbler_snippet { 'url_proxy' :
}

cobbler_digest_user { 'cobbler' :
  notify   => Service[cobblerd],
  password => '0mMXE4t8',
  require  => Package[cobbler],
}

cobbler_distro { 'bootstrap' :
  arch      => 'x86_64',
  breed     => 'redhat',
  initrd    => '/var/www/nailgun/bootstrap/initramfs.img',
  kernel    => '/var/www/nailgun/bootstrap/linux',
  ksmeta    => '',
  osversion => 'rhel6',
  require   => Class[Cobbler::Server],
}

cobbler_distro { 'centos-x86_64' :
  arch      => 'x86_64',
  breed     => 'redhat',
  initrd    => '/var/www/nailgun/centos/x86_64/isolinux/initrd.img',
  kernel    => '/var/www/nailgun/centos/x86_64/isolinux/vmlinuz',
  ksmeta    => 'tree=http://@@server@@:8080/centos/x86_64/',
  osversion => 'rhel6',
  require   => Class[Cobbler::Server],
}

cobbler_distro { 'ubuntu_1404_x86_64' :
  arch      => 'x86_64',
  breed     => 'ubuntu',
  initrd    => '/var/www/nailgun/ubuntu/x86_64/images/initrd.gz',
  kernel    => '/var/www/nailgun/ubuntu/x86_64/images/linux',
  ksmeta    => '',
  osversion => 'trusty',
  require   => Class[Cobbler::Server],
}

cobbler_distro { 'ubuntu_bootstrap' :
  arch      => 'x86_64',
  breed     => 'ubuntu',
  initrd    => '/var/www/nailgun/bootstraps/active_bootstrap/initrd.img',
  kernel    => '/var/www/nailgun/bootstraps/active_bootstrap/vmlinuz',
  ksmeta    => '',
  osversion => 'trusty',
  require   => Class[Cobbler::Server],
}

cobbler_profile { 'bootstrap' :
  distro    => 'bootstrap',
  kickstart => '',
  kopts     => 'intel_pstate=disable console=ttyS0,9600 console=tty0 biosdevname=0 url=http://10.109.0.2:8000/api mco_user=mcollective mco_pass=PPMi1XT2',
  ksmeta    => '',
  menu      => true,
  notify    => 'Exec[nailgun_cobbler_sync]',
  require   => Cobbler_distro[bootstrap],
  server    => '10.109.0.2',
}

cobbler_profile { 'centos-x86_64' :
  distro    => 'centos-x86_64',
  kickstart => '/var/lib/cobbler/kickstarts/centos-x86_64.ks',
  kopts     => 'biosdevname=0 sshd=1 dhcptimeout=120',
  ksmeta    => '',
  menu      => false,
  notify    => 'Exec[nailgun_cobbler_sync]',
  require   => Cobbler_distro[centos-x86_64],
  server    => '10.109.0.2',
}

cobbler_profile { 'ubuntu_1404_x86_64' :
  distro    => 'ubuntu_1404_x86_64',
  kickstart => '/var/lib/cobbler/kickstarts/ubuntu-amd64.preseed',
  kopts     => 'net.ifnames=0 biosdevname=0 netcfg/choose_interface=eth0 netcfg/dhcp_timeout=120 netcfg/link_detection_timeout=20',
  ksmeta    => '',
  menu      => false,
  notify    => 'Exec[nailgun_cobbler_sync]',
  require   => Cobbler_distro[ubuntu_1404_x86_64],
  server    => '10.109.0.2',
}

cobbler_profile { 'ubuntu_bootstrap' :
  distro    => 'ubuntu_bootstrap',
  kickstart => '',
  kopts     => 'console=ttyS0,9600 console=tty0 panic=60 ethdevice-timeout=120 boot=live toram components fetch=http://10.109.0.2:8080/bootstraps/active_bootstrap/root.squashfs biosdevname=0 url=http://10.109.0.2:8000/api mco_user=mcollective mco_pass=PPMi1XT2',
  ksmeta    => '',
  menu      => true,
  notify    => 'Exec[nailgun_cobbler_sync]',
  require   => Cobbler_distro[ubuntu_bootstrap],
  server    => '10.109.0.2',
}

exec { '/var/lib/tftpboot/chain.c32' :
  command => 'cp /usr/share/syslinux/chain.c32 /var/lib/tftpboot/chain.c32',
  path    => '/usr/bin:/bin:/usr/sbin:/sbin',
  require => [ Package[xinetd], Package[tftp-server], Package[syslinux], Package[wget], Package[python-ipaddr], Package[fence-agents], Package[bind-utils], Package[cobbler] ],
  unless  => 'test -e /var/lib/tftpboot/chain.c32',
}

exec { 'cobbler_disable_selinux' :
  command => 'setenforce 0',
  onlyif  => 'getenforce | grep -q Enforcing',
  path    => '/usr/bin:/bin:/usr/sbin:/sbin',
}

exec { 'cobbler_disable_selinux_permanent' :
  command => 'sed -ie "s/^SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config',
  onlyif  => 'grep -q "^SELINUX=enforcing" /etc/selinux/config',
  path    => '/usr/bin:/bin:/usr/sbin:/sbin',
}

exec { 'cobbler_sync' :
  before      => 'Service[dnsmasq]',
  command     => 'cobbler sync',
  notify      => [ Service[dnsmasq], Service[xinetd] ],
  path        => '/usr/bin:/bin:/usr/sbin:/sbin',
  refreshonly => false,
  require     => [ Service[httpd], Exec[wait_for_web_service], Package[cobbler], Package[dnsmasq], File[/etc/dnsmasq.upstream] ],
  subscribe   => Service[cobblerd],
  tries       => '20',
  try_sleep   => '3',
}

exec { 'cobbler_system_add_default' :
  command => 'cobbler system add --name=default                     --profile=bootstrap --netboot-enabled=True',
  notify  => 'Exec[nailgun_cobbler_sync]',
  onlyif  => 'test -z `cobbler system find --name=default`',
  path    => '/usr/bin:/bin:/usr/sbin:/sbin',
  require => Cobbler_profile[bootstrap],
}

exec { 'cobbler_system_edit_default' :
  command => 'cobbler system edit --name=default                     --profile=bootstrap --netboot-enabled=True',
  notify  => 'Exec[nailgun_cobbler_sync]',
  path    => '/usr/bin:/bin:/usr/sbin:/sbin',
  require => Cobbler_profile[bootstrap],
  unless  => 'cobbler system report --name default 2>/dev/null | grep -q -E \'^Profile\s*:\s*bootstrap\'',
}

exec { 'cp /root/.ssh/id_rsa.pub /etc/cobbler/authorized_keys' :
  command => 'cp /root/.ssh/id_rsa.pub /etc/cobbler/authorized_keys',
  creates => '/etc/cobbler/authorized_keys',
  path    => '/usr/bin:/bin:/usr/sbin:/sbin',
  require => Class[Cobbler::Server],
}

exec { 'nailgun_cobbler_sync' :
  command     => 'cobbler sync',
  path        => '/usr/bin:/bin:/usr/sbin:/sbin',
  refreshonly => true,
}

exec { 'wait_for_web_service' :
  command   => '[ $(curl --connect-timeout 1 -s -w %{http_code} http://127.0.0.1:80/ -o /dev/null) -lt 500 ]',
  path      => '/usr/bin:/bin:/usr/sbin:/sbin',
  require   => Service[httpd],
  subscribe => Service[httpd],
  tries     => '60',
  try_sleep => '1',
}

file { '/etc/cobbler/dnsmasq.template' :
  content => '# Cobbler generated configuration file for dnsmasq
# $date
#

read-ethers
log-queries
log-facility=/var/log/dnsmasq.log
addn-hosts = /var/lib/cobbler/cobbler_hosts
conf-dir=/etc/dnsmasq.d
domain=local
dhcp-lease-max=1800

server=/test.domain.local/
server=/test.domain.local/10.109.0.1
resolv-file=/etc/dnsmasq.upstream
interface=eth0

cache-size=1024

# This is one of the key options. dnsmasq tries to move out servername
# and PXE filename from special fields into DHCP options.
# Some old clients can\'t understand those DHCP options, so they
# will not be able to boot via PXE without this option enabled.
# For example gPXE will not work while iPXE works fine.
dhcp-no-override

# for many simultaneously DHCPDISCOVVER requests dnsmasq can offer
# the same IP for two differnt MAC addresses. This option prevents it
# by assigning IPs one by one instead of using hash algorithm.
dhcp-sequential-ip

dhcp-option=6,10.109.0.2
$insert_cobbler_system_definitions
',
  group   => 'root',
  mode    => '0644',
  notify  => [ Service[cobblerd], Exec[cobbler_sync], Service[dnsmasq] ],
  owner   => 'root',
  require => [ Package[cobbler], Package[dnsmasq] ],
}

file { '/etc/cobbler/modules.conf' :
  before  => 'File[/etc/cobbler/settings]',
  content => '# cobbler module configuration file
# =================================

# authentication:
# what users can log into the WebUI and Read-Write XMLRPC?
# choices:
#    authn_denyall    -- no one (default)
#    authn_configfile -- use /etc/cobbler/users.digest (for basic setups)
#    authn_passthru   -- ask Apache to handle it (used for kerberos)
#    authn_ldap       -- authenticate against LDAP
#    authn_spacewalk  -- ask Spacewalk/Satellite (experimental)
#    authn_testing    -- username/password is always testing/testing (debug)
#    (user supplied)  -- you may write your own module
# WARNING: this is a security setting, do not choose an option blindly.
# for more information:
# https://fedorahosted.org/cobbler/wiki/CobblerWebInterface
# https://fedorahosted.org/cobbler/wiki/CustomizableSecurity
# https://fedorahosted.org/cobbler/wiki/CobblerWithKerberos
# https://fedorahosted.org/cobbler/wiki/CobblerWithLdap

[authentication]
module = authn_configfile

# authorization:
# once a user has been cleared by the WebUI/XMLRPC, what can they do?
# choices:
#    authz_allowall   -- full access for all authneticated users (default)
#    authz_ownership  -- use users.conf, but add object ownership semantics
#    (user supplied)  -- you may write your own module
# WARNING: this is a security setting, do not choose an option blindly.
# If you want to further restrict cobbler with ACLs for various groups,
# pick authz_ownership.  authz_allowall does not support ACLs.  configfile
# does but does not support object ownership which is useful as an additional
# layer of control.

# for more information:
# https://fedorahosted.org/cobbler/wiki/CobblerWebInterface
# https://fedorahosted.org/cobbler/wiki/CustomizableSecurity
# https://fedorahosted.org/cobbler/wiki/CustomizableAuthorization
# https://fedorahosted.org/cobbler/wiki/AuthorizationWithOwnership
# https://fedorahosted.org/cobbler/wiki/AclFeature

[authorization]
module = authz_allowall

# dns:
# chooses the DNS management engine if manage_dns is enabled
# in /etc/cobbler/settings, which is off by default.
# choices:
#    manage_bind    -- default, uses BIND/named
#    manage_dnsmasq -- uses dnsmasq, also must select dnsmasq for dhcp below
# NOTE: more configuration is still required in /etc/cobbler
# for more information:
# https://fedorahosted.org/cobbler/wiki/ManageDns

[dns]
module = manage_dnsmasq

# dhcp:
# chooses the DHCP management engine if manage_dhcp is enabled
# in /etc/cobbler/settings, which is off by default.
# choices:
#    manage_isc     -- default, uses ISC dhcpd
#    manage_dnsmasq -- uses dnsmasq, also must select dnsmasq for dns above
# NOTE: more configuration is still required in /etc/cobbler
# for more information:
# https://fedorahosted.org/cobbler/wiki/ManageDhcp

[dhcp]
module = manage_dnsmasq

# tftpd:
# chooses the TFTP management engine if manage_tftp is enabled
# in /etc/cobbler/settings, which is ON by default.
#
# choices:
#    manage_in_tftpd -- default, uses the system\'s tftp server
#    manage_tftpd_py -- uses cobbler\'s tftp server
#
# for more information:
# https://fedorahosted.org/cobbler/wiki/ManageTftp

[tftpd]
module = manage_in_tftpd

#--------------------------------------------------
',
  group   => 'root',
  mode    => '0644',
  notify  => [ Service[cobblerd], Exec[cobbler_sync] ],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/etc/cobbler/power/fence_ssh.template' :
  content => 'action=$power_mode
login=$power_user
passwd="unset"
identity_file=$power_pass
port=1
ipaddr=$power_address
power_timeout=20',
  group   => 'root',
  mode    => '0644',
  owner   => 'root',
  require => Class[Cobbler::Server],
}

file { '/etc/cobbler/pxe/pxedefault.template' :
  content => 'DEFAULT menu
PROMPT 0
MENU TITLE Boot menu
TIMEOUT 50
TOTALTIMEOUT 0
ONTIMEOUT $pxe_timeout_profile

LABEL local
        MENU LABEL (local)
        MENU DEFAULT
        LOCALBOOT -1

$pxe_menu_items

MENU end
',
  group   => 'root',
  mode    => '0644',
  notify  => [ Service[cobblerd], Exec[cobbler_sync] ],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/etc/cobbler/pxe/pxelocal.template' :
  content => 'DEFAULT local
PROMPT 0
TIMEOUT 0
TOTALTIMEOUT 0
ONTIMEOUT local

LABEL local
# 0x80 works in VirtualBox -1 is the default one
#     LOCALBOOT 0x80
#     LOCALBOOT -1
    COM32 chain.c32
    APPEND hd0',
  group   => 'root',
  mode    => '0644',
  notify  => [ Service[cobblerd], Exec[cobbler_sync] ],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/etc/cobbler/settings' :
  before  => 'Service[cobblerd]',
  content => '---
# cobbler settings file
# restart cobblerd and run "cobbler sync" after making changes
# This config file is in YAML 1.0 format
# see http://yaml.org
# ==========================================================
# if 1, cobbler will allow insertions of system records that duplicate
# the --dns-name information of other system records.  In general,
# this is undesirable and should be left 0.
allow_duplicate_hostnames: 0

# if 1, cobbler will allow insertions of system records that duplicate
# the ip address information of other system records.  In general,
# this is undesirable and should be left 0.
allow_duplicate_ips: 0

# if 1, cobbler will allow insertions of system records that duplicate
# the mac address information of other system records.  In general,
# this is undesirable.
allow_duplicate_macs: 0

# by default, installs are *not* set to send installation logs to the cobbler
# # # server.  With \'anamon_enabled\', kickstart templates may use the pre_anamon
# # # snippet to allow remote live monitoring of their installations from the
# # # cobbler server.  Installation logs will be stored under
# # # /var/log/cobbler/anamon/.  NOTE: This does allow an xmlrpc call to send logs
# # # to this directory, without authentication, so enable only if you are
# # # ok with this limitation.
anamon_enabled: 0

# Email out a report when cobbler finishes installing a system.
# enabled: set to 1 to turn this feature on
# sender: optional
# email: which addresses to email
# smtp_server: used to specify another server for an MTA
# subject: use the default subject unless overridden
build_reporting_enabled: 0
build_reporting_sender: ""
build_reporting_email: [ \'root@localhost\' ]
build_reporting_smtp_server: "localhost"
build_reporting_subject: ""

# Cheetah-language kickstart templates can import Python modules.
# while this is a useful feature, it is not safe to allow them to
# import anything they want. This whitelists which modules can be
# imported through Cheetah.  Users can expand this as needed but
# should never allow modules such as subprocess or those that
# allow access to the filesystem as Cheetah templates are evaluated
# by cobblerd as code.
cheetah_import_whitelist:
   - "random"
   - "re"
   - "time"
   - "orchestra"
   - "json"

# Default createrepo_flags to use for new repositories. If you have
# createrepo >= 0.4.10, consider "-c cache --update -C", which can
# dramatically improve your "cobbler reposync" time.  "-s sha"
# enables working with Fedora repos from F11/F12 from EL-4 or
# EL-5 without python-hashlib installed (which is not available
# on EL-4)
createrepo_flags: "-c cache -s sha"

# if no kickstart is specified to profile add, use this template
default_kickstart: /var/lib/cobbler/kickstarts/ubuntu-server.preseed

# configure all installed systems to use these nameservers by default
# unless defined differently in the profile.  For DHCP configurations
# you probably do /not/ want to supply this.
default_name_servers: []

# if using the authz_ownership module (see the Wiki), objects
# created without specifying an owner are assigned to this
# owner and/or group.  Can be a comma seperated list.
default_ownership:
    - "admin"

# cobbler has various sample kickstart templates stored
# in /var/lib/cobbler/kickstarts/.  This controls
# what install (root) password is set up for those
# systems that reference this variable.  The factory
# default is "cobbler" and cobbler check will warn if
# this is not changed.
default_password_crypted: ""

# for libvirt based installs in koan, if no virt bridge
# is specified, which bridge do we try?  For EL 4/5 hosts
# this should be xenbr0, for all versions of Fedora, try
# "virbr0".  This can be overriden on a per-profile
# basis or at the koan command line though this saves
# typing to just set it here to the most common option.
default_virt_bridge: virbr0

# use this as the default disk size for virt guests (GB)
default_virt_file_size: 5

# use this as the default memory size for virt guests (MB)
default_virt_ram: 512

# if koan is invoked without --virt-type and no virt-type
# is set on the profile/system, what virtualization type
# should be assumed?  Values: xenpv, xenfv, qemu, vmware
# (NOTE: this does not change what virt_type is chosen by import)
default_virt_type: qemu

# controls whether cobbler will add each new profile entry to the default
# PXE boot menu.  This can be over-ridden on a per-profile
# basis when adding/editing profiles with --enable-menu=0/1.  Users
# should ordinarily leave this setting enabled unless they are concerned
# with accidental reinstalls from users who select an entry at the PXE
# boot menu.  Adding a password to the boot menus templates
# may also be a good solution to prevent unwanted reinstallations
enable_menu: 1

# enable Func-integration?  This makes sure each installed machine is set up
# to use func out of the box, which is a powerful way to script and control
# remote machines.
# Func lives at http://fedorahosted.org/func
# read more at https://fedorahosted.org/cobbler/wiki/FuncIntegration
# you will need to mirror Fedora/EPEL packages for this feature, so see
# https://fedorahosted.org/cobbler/wiki/ManageYumRepos if you want cobbler
# to help you with this
func_auto_setup: 0
func_master: overlord.example.org

# change this port if Apache is not running plaintext on port
# 80.  Most people can leave this alone.
http_port: 80

# kernel options that should be present in every cobbler installation.
# kernel options can also be applied at the distro/profile/system
# level.
kernel_options:
    ksdevice: bootif
    lang: \' \'
    text: ~
    locale: en_US
    priority: critical

# s390 systems require additional kernel options in addition to the
# above defaults
kernel_options_s390x:
    RUNKS: 1
    ramdisk_size: 40000
    root: /dev/ram0
    ro: ~
    ip: off
    vnc: ~

# configuration options if using the authn_ldap module. See the
# the Wiki for details.  This can be ignored if you are not using
# LDAP for WebUI/XMLRPC authentication.
ldap_server: "ldap.example.com"
ldap_base_dn: "DC=example,DC=com"
ldap_port: 389
ldap_tls: 1
ldap_anonymous_bind: 1
ldap_search_bind_dn: \'\'
ldap_search_passwd: \'\'
ldap_search_prefix: \'uid=\'

# cobbler has a feature that allows for integration with config management
# systems such as Puppet.  The following parameters work in conjunction with
# --mgmt-classes  and are described in furhter detail at:
# https://fedorahosted.org/cobbler/wiki/UsingCobblerWithConfigManagementSystem
mgmt_classes: []
mgmt_parameters:
   from_cobbler: 1

# if enabled, this setting ensures that puppet is installed during
# machine provision, a client certificate is generated and a
# certificate signing request is made with the puppet master server
puppet_auto_setup: 0

# when puppet starts on a system after installation it needs to have
# its certificate signed by the puppet master server. Enabling the
# following feature will ensure that the puppet server signs the
# certificate after installation if the puppet master server is
# running on the same machine as cobbler. This requires
# puppet_auto_setup above to be enabled
sign_puppet_certs_automatically: 0

# location of the puppet signing utility puppetca
puppetca_path: "/usr/sbin/puppetca"

# when a puppet managed machine is reinstalled it is necessary to
# remove the puppet certificate from the puppet master server before a
# new certificate is signed (see above). Enabling the following
# feature will ensure that the certificate for the machine to be
# installed is removed from the puppet master server if the puppet
# master server is running on the same machine as cobbler. This
# requires puppet_auto_setup above to be enabled
remove_old_puppet_certs_automatically: 0

# set to 1 to enable Cobbler\'s DHCP management features.
# the choice of DHCP management engine is in /etc/cobbler/modules.conf
manage_dhcp: 1

# set to 1 to enable Cobbler\'s DNS management features.
# the choice of DNS mangement engine is in /etc/cobbler/modules.conf
manage_dns: 1

# set to 1 to enable Cobbler\'s TFTP management features.
# the choice of TFTP mangement engine is in /etc/cobbler/modules.conf
manage_tftpd: 1

# set to 1 to enable Cobbler\'s RSYNC management features.
manage_rsync: 0

# if using BIND (named) for DNS management in /etc/cobbler/modules.conf
# and manage_dns is enabled (above), this lists which zones are managed
# See the Wiki (https://fedorahosted.org/cobbler/wiki/ManageDns) for more info
manage_forward_zones: []
manage_reverse_zones: []

# if using cobbler with manage_dhcp, put the IP address
# of the cobbler server here so that PXE booting guests can find it
# if you do not set this correctly, this will be manifested in TFTP open timeouts.
next_server: 10.109.0.2

# settings for power management features.  optional.
# see https://fedorahosted.org/cobbler/wiki/PowerManagement to learn more
# choices:
#    bullpap wti apc apc_snmp ether-wake ipmilan
#    drac ipmitool ilo rsa lpar bladecenter virsh
power_management_default_type: \'ether_wake\'

# the commands used by the power management module are sourced
# from what directory?
power_template_dir: "/etc/cobbler/power"

# if this setting is set to 1, cobbler systems that pxe boot
# will request at the end of their installation to toggle the
# --netboot-enabled record in the cobbler system record.  This eliminates
# the potential for a PXE boot loop if the system is set to PXE
# first in it\'s BIOS order.  Enable this if PXE is first in your BIOS
# boot order, otherwise leave this disabled.   See the manpage
# for --netboot-enabled.
pxe_just_once: 1

# the templates used for PXE config generation are sourced
# from what directory?
pxe_template_dir: "/etc/cobbler/pxe"

# Path to where system consoles are
consoles: "/var/consoles"

# Are you using a Red Hat management platform in addition to Cobbler?
# Cobbler can help you register to it.  Choose one of the following:
#   "off"    : I\'m not using Red Hat Network, Satellite, or Spacewalk
#   "hosted" : I\'m using Red Hat Network
#   "site"   : I\'m using Red Hat Satellite Server or Spacewalk
# You will also want to read: https://fedorahosted.org/cobbler/wiki/TipsForRhn
redhat_management_type: "off"

# if redhat_management_type is enabled, choose your server
#   "management.example.org" : For Satellite or Spacewalk
#   "xmlrpc.rhn.redhat.com"  : For Red Hat Network
# This setting is also used by the code that supports using Spacewalk/Satellite users/passwords
# within Cobbler Web and Cobbler XMLRPC.  Using RHN Hosted for this is not supported.
# This feature can be used even if redhat_management_type is off, you just have
# to have authn_spacewalk selected in modules.conf
redhat_management_server: "xmlrpc.rhn.redhat.com"

# specify the default Red Hat authorization key to use to register
# system.  If left blank, no registration will be attempted.  Similarly
# you can set the --redhat-management-key to blank on any system to
# keep it from trying to register.
redhat_management_key: ""

# if using authn_spacewalk in modules.conf to let cobbler authenticate
# against Satellite/Spacewalk\'s auth system, by default it will not allow per user
# access into Cobbler Web and Cobbler XMLRPC.
# in order to permit this, the following setting must be enabled HOWEVER
# doing so will permit all Spacewalk/Satellite users of certain types to edit all
# of cobbler\'s configuration.
# these roles are:  config_admin and org_admin
# users should turn this on only if they want this behavior and
# do not have a cross-multi-org seperation concern.  If you have
# a single org in your satellite, it\'s probably safe to turn this
# on and then you can use CobblerWeb alongside a Satellite install.
redhat_management_permissive: 0

# if set to 1, allows /usr/bin/cobbler-register (part of the koan package)
# to be used to remotely add new cobbler system records to cobbler.
# this effectively allows for registration of new hardware from system
# records.
register_new_installs: 0

# Flags to use for yum\'s reposync.  If your version of yum reposync
# does not support -l, you may need to remove that option.
reposync_flags: "-l -m -d"

# when DHCP and DNS management are enabled, cobbler sync can automatically
# restart those services to apply changes.  The exception for this is
# if using ISC for DHCP, then omapi eliminates the need for a restart.
# omapi, however, is experimental and not recommended for most configurations.
# If DHCP and DNS are going to be managed, but hosted on a box that
# is not on this server, disable restarts here and write some other
# script to ensure that the config files get copied/rsynced to the destination
# box.  This can be done by modifying the restart services trigger.
# Note that if manage_dhcp and manage_dns are disabled, the respective
# parameter will have no effect.  Most users should not need to change
# this.
restart_dns: 1
restart_dhcp: 1

# install triggers are scripts in /var/lib/cobbler/triggers/install
# that are triggered in kickstart pre and post sections.  Any
# executable script in those directories is run.  They can be used
# to send email or perform other actions.  They are currently
# run as root so if you do not need this functionality you can
# disable it, though this will also disable "cobbler status" which
# uses a logging trigger to audit install progress.
run_install_triggers: 1

# enables a trigger which version controls all changes to /var/lib/cobbler
# when add, edit, or sync events are performed.  This can be used
# to revert to previous database versions, generate RSS feeds, or for
# other auditing or backup purposes. "git" and "hg" are currently suported,
# but git is the recommend SCM for use with this feature.
scm_track_enabled: 0
scm_track_mode: "git"

# this is the address of the cobbler server -- as it is used
# by systems during the install process, it must be the address
# or hostname of the system as those systems can see the server.
# if you have a server that appears differently to different subnets
# (dual homed, etc), you need to read the --server-override section
# of the manpage for how that works.
server: 10.109.0.2

# this is a directory of files that cobbler uses to make
# templating easier.  See the Wiki for more information.  Changing
# this directory should not be required.
snippetsdir: /var/lib/cobbler/snippets

# Normally if a kickstart is specified at a remote location, this
# URL will be passed directly to the kickstarting system, thus bypassing
# the usual snippet templating Cobbler does for local kickstart files. If
# this option is enabled, Cobbler will fetch the file contents internally
# and serve a templated version of the file to the client.
template_remote_kickstarts: 0

# cobbler uses pxe booting by default, enable this option if you want to
# use gpxe
use_gpxe: 0

# should new profiles for virtual machines default to auto booting with the physical host when the physical host reboots?
# this can be overridden on each profile or system object.
virt_auto_boot: 1

# cobbler\'s web directory.  Don\'t change this setting -- see the
# Wiki on "relocating your cobbler install" if your /var partition
# is not large enough.
webdir: /var/www/cobbler

# cobbler\'s public XMLRPC listens on this port.  Change this only
# if absolutely needed, as you\'ll have to start supplying a new
# port option to koan if it is not the default.
xmlrpc_port: 25151

# "cobbler repo add" commands set cobbler up with repository
# information that can be used during kickstart and is automatically
# set up in the cobbler kickstart templates.  By default, these
# are only available at install time.  To make these repositories
# usable on installed systems (since cobbler makes a very convient)
# mirror, set this to 1.  Most users can safely set this to 1.  Users
# who have a dual homed cobbler server, or are installing laptops that
# will not always have access to the cobbler server may wish to leave
# this as 0.  In that case, the cobbler mirrored yum repos are still
# accessable at http://cobbler.example.org/cblr/repo_mirror and yum
# configuration can still be done manually.  This is just a shortcut.
yum_post_install_mirror: 1

# the default yum priority for all the distros.  This is only used
# if yum-priorities plugin is used.  1=maximum.  Tweak with caution.
yum_distro_priority: 1

# Flags to use for yumdownloader.  Not all versions may support
# --resolve.
yumdownloader_flags: "--resolve"
',
  group   => 'root',
  mode    => '0644',
  notify  => [ Service[cobblerd], Exec[cobbler_sync] ],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/etc/dnsmasq.upstream' :
  content => 'domain test.domain.local
search test.domain.local
nameserver 10.109.0.1
',
  group   => 'root',
  mode    => '0644',
  owner   => 'root',
}

file { '/etc/httpd/conf.d/' :
  ensure => 'directory',
}

file { '/etc/httpd/conf.d/cobbler-tftp.conf' :
  content => 'Alias /cobbler/boot /var/lib/tftpboot

<Directory /var/lib/tftpboot>
  Options +Indexes +FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from all
</Directory>
',
  group   => 'root',
  mode    => '0644',
  notify  => Service[httpd],
  owner   => 'root',
  require => File[/etc/httpd/conf.d/],
}

file { '/etc/httpd/conf.d/nailgun.conf' :
  content => '# Force everything except cobbler and nailgun dir to port 8000
RewriteEngine on
RewriteCond %{HTTPS} off
RewriteRule ^/$ https://%{HTTP_HOST}:8443%{REQUEST_URI} [R=301,L]
RewriteCond %{HTTPS} off
RewriteCond %{REQUEST_URI} !^/(cblr|cobbler)
RewriteRule (.*) http://%{HTTP_HOST}:8000%{REQUEST_URI} [R=301,L]
',
  group   => 'root',
  mode    => '0644',
  notify  => Service[httpd],
  owner   => 'root',
  require => [ File[/etc/httpd], File[/etc/httpd/conf/], File[/etc/httpd/conf.d/] ],
}

file { '/etc/httpd/conf.d/ssl.conf' :
  content => '#
# This is the Apache server configuration file providing SSL support.
# It contains the configuration directives to instruct the server how to
# serve pages over an https connection. For detailing information about these
# directives see <URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html>
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They\'re here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.
#

LoadModule ssl_module modules/mod_ssl.so

#
# When we also provide SSL we have to listen to the
# the HTTPS port in addition.
#
Listen 443

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin\' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use and second the expiring timeout (in seconds).
SSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)
SSLSessionCacheTimeout  300

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization.
SSLMutex default

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn\'t
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512

#
# Use "SSLCryptoDevice" to enable any supported hardware
# accelerators. Use "openssl engine -v" to list supported
# engine names.  NOTE: If you enable an accelerator and the
# server does not start, consult the error logs and ensure
# your accelerator is functioning properly.
#
SSLCryptoDevice builtin
#SSLCryptoDevice ubsec

##
## SSL Virtual Host Context
##

<VirtualHost _default_:443>
# Redirect all queries to root to port where UI is located
RewriteEngine on
RewriteRule ^/$ https://%{HTTP_HOST}:8443/ [R=301,L]

# General setup for the virtual host, inherited from global configuration
#DocumentRoot "/var/www/html"
#ServerName www.example.com:443

# Use separate log files for the SSL virtual host; note that LogLevel
# is not inherited from httpd.conf.
ErrorLog logs/ssl_error_log
TransferLog logs/ssl_access_log
LogLevel warn

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on

#   SSL Protocol support:
# List the enable protocol levels with which clients will be able to
# connect.  Disable SSLv2 access by default:
SSLProtocol all -SSLv2 -SSLv3

# Prefer the server\'s cipher order
SSLHonorCipherOrder on

#   SSL Cipher Suite:
# List the ciphers that the client is permitted to negotiate.
# See the mod_ssl documentation for a complete list.
SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:!MEDIUM:!LOW:+HIGH

#   Server Certificate:
# Point SSLCertificateFile at a PEM encoded certificate.  If
# the certificate is encrypted, then you will be prompted for a
# pass phrase.  Note that a kill -HUP will prompt again.  A new
# certificate can be generated using the genkey(1) command.
SSLCertificateFile /var/lib/fuel/keys/master/cobbler/cobbler.crt

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you\'ve both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
SSLCertificateKeyFile /var/lib/fuel/keys/master/cobbler/cobbler.key

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convinience.
#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
#SSLVerifyClient require
#SSLVerifyDepth  10

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#<Location />
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the `one line\' version of the client\'s X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: `xxj31ZMTZzkVA\'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related `SSL_*\' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context.
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
</Files>
<Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn\'t wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is send or allowed to received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use

#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly.
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
SetEnvIf User-Agent ".*MSIE.*" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
CustomLog logs/ssl_request_log \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>

',
  group   => 'root',
  mode    => '0644',
  notify  => Service[httpd],
  owner   => 'root',
  require => [ File[/etc/httpd], File[/etc/httpd/conf/], File[/etc/httpd/conf.d/] ],
}

file { '/etc/httpd/conf/' :
  ensure => 'directory',
}

file { '/etc/httpd/conf/httpd.conf' :
  content => '#
# This is the main Apache server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See <URL:http://httpd.apache.org/docs/2.2/> for detailed information.
# In particular, see
# <URL:http://httpd.apache.org/docs/2.2/mod/directives.html>
# for a discussion of each configuration directive.
#
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They\'re here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.
#
# The configuration directives are grouped into three basic sections:
#  1. Directives that control the operation of the Apache server process as a
#     whole (the \'global environment\').
#  2. Directives that define the parameters of the \'main\' or \'default\' server,
#     which responds to requests that aren\'t handled by a virtual host.
#     These directives also provide default values for the settings
#     of all virtual hosts.
#  3. Settings for virtual hosts, which allow Web requests to be sent to
#     different IP addresses or hostnames and have them handled by the
#     same Apache server process.
#
# Configuration and logfile names: If the filenames you specify for many
# of the server\'s control files begin with "/" (or "drive:/" for Win32), the
# server will use that explicit path.  If the filenames do *not* begin
# with "/", the value of ServerRoot is prepended -- so "logs/foo.log"
# with ServerRoot set to "/etc/httpd" will be interpreted by the
# server as "/etc/httpd/logs/foo.log".
#

### Section 1: Global Environment
#
# The directives in this section affect the overall operation of Apache,
# such as the number of concurrent requests it can handle or where it
# can find its configuration files.
#

#
# Don\'t give away too much information about all the subcomponents
# we are running.  Comment out this line if you don\'t mind remote sites
# finding out what major optional modules you are running
ServerTokens OS

#
# ServerRoot: The top of the directory tree under which the server\'s
# configuration, error, and log files are kept.
#
# NOTE!  If you intend to place this on an NFS (or otherwise network)
# mounted filesystem then please read the LockFile documentation
# (available at <URL:http://httpd.apache.org/docs/2.2/mod/mpm_common.html#lockfile>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
ServerRoot "/etc/httpd"

#
# PidFile: The file in which the server should record its process
# identification number when it starts.  Note the PIDFILE variable in
# /etc/sysconfig/httpd must be set appropriately if this location is
# changed.
#
PidFile run/httpd.pid

#
# Timeout: The number of seconds before receives and sends time out.
#
Timeout 60

#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive Off

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 100

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the
# same client on the same connection.
#
KeepAliveTimeout 15

##
## Server-Pool Size Regulation (MPM specific)
##

# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare
# MaxSpareServers: maximum number of server processes which are kept spare
# ServerLimit: maximum value for MaxClients for the lifetime of the server
# MaxClients: maximum number of server processes allowed to start
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule prefork.c>
StartServers       8
MinSpareServers    5
MaxSpareServers   20
ServerLimit      256
MaxClients       256
MaxRequestsPerChild  4000
</IfModule>

# worker MPM
# StartServers: initial number of server processes to start
# MaxClients: maximum number of simultaneous client connections
# MinSpareThreads: minimum number of worker threads which are kept spare
# MaxSpareThreads: maximum number of worker threads which are kept spare
# ThreadsPerChild: constant number of worker threads in each server process
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule worker.c>
StartServers         4
MaxClients         300
MinSpareThreads     25
MaxSpareThreads     75
ThreadsPerChild     25
MaxRequestsPerChild  0
</IfModule>

#
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, in addition to the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to
# prevent Apache from glomming onto all bound IP addresses (0.0.0.0)
#
#Listen 12.34.56.78:80
Listen 80

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule\' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by `httpd -l\') do not need
# to be loaded here.
#
# Example:
# LoadModule foo_module modules/mod_foo.so
#
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule auth_digest_module modules/mod_auth_digest.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_alias_module modules/mod_authn_alias.so
LoadModule authn_anon_module modules/mod_authn_anon.so
LoadModule authn_dbm_module modules/mod_authn_dbm.so
LoadModule authn_default_module modules/mod_authn_default.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_owner_module modules/mod_authz_owner.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_dbm_module modules/mod_authz_dbm.so
LoadModule authz_default_module modules/mod_authz_default.so
LoadModule ldap_module modules/mod_ldap.so
LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
LoadModule include_module modules/mod_include.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule logio_module modules/mod_logio.so
LoadModule env_module modules/mod_env.so
LoadModule ext_filter_module modules/mod_ext_filter.so
LoadModule mime_magic_module modules/mod_mime_magic.so
LoadModule expires_module modules/mod_expires.so
LoadModule deflate_module modules/mod_deflate.so
LoadModule headers_module modules/mod_headers.so
LoadModule usertrack_module modules/mod_usertrack.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule mime_module modules/mod_mime.so
LoadModule dav_module modules/mod_dav.so
LoadModule status_module modules/mod_status.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule info_module modules/mod_info.so
LoadModule dav_fs_module modules/mod_dav_fs.so
LoadModule vhost_alias_module modules/mod_vhost_alias.so
LoadModule negotiation_module modules/mod_negotiation.so
LoadModule dir_module modules/mod_dir.so
LoadModule actions_module modules/mod_actions.so
LoadModule speling_module modules/mod_speling.so
LoadModule userdir_module modules/mod_userdir.so
LoadModule alias_module modules/mod_alias.so
LoadModule substitute_module modules/mod_substitute.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule cache_module modules/mod_cache.so
LoadModule suexec_module modules/mod_suexec.so
LoadModule disk_cache_module modules/mod_disk_cache.so
LoadModule cgi_module modules/mod_cgi.so
LoadModule version_module modules/mod_version.so

#
# The following modules are not loaded by default:
#
#LoadModule asis_module modules/mod_asis.so
#LoadModule authn_dbd_module modules/mod_authn_dbd.so
#LoadModule cern_meta_module modules/mod_cern_meta.so
#LoadModule cgid_module modules/mod_cgid.so
#LoadModule dbd_module modules/mod_dbd.so
#LoadModule dumpio_module modules/mod_dumpio.so
#LoadModule filter_module modules/mod_filter.so
#LoadModule ident_module modules/mod_ident.so
#LoadModule log_forensic_module modules/mod_log_forensic.so
#LoadModule unique_id_module modules/mod_unique_id.so
#

#
# Load config files from the config directory "/etc/httpd/conf.d".
#
Include conf.d/*.conf

#
# ExtendedStatus controls whether Apache will generate "full" status
# information (ExtendedStatus On) or just basic information (ExtendedStatus
# Off) when the "server-status" handler is called. The default is Off.
#
#ExtendedStatus On

#
# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.
#
# User/Group: The name (or #number) of the user/group to run httpd as.
#  . On SCO (ODT 3) use "User nouser" and "Group nogroup".
#  . On HPUX you may not be able to use shared memory as nobody, and the
#    suggested workaround is to create a user www and use that user.
#  NOTE that some kernels refuse to setgid(Group) or semctl(IPC_SET)
#  when the value of (unsigned)Group is above 60000;
#  don\'t use Group #-1 on these systems!
#
User apache
Group apache

### Section 2: \'Main\' server configuration
#
# The directives in this section set up the values used by the \'main\'
# server, which responds to any requests that aren\'t handled by a
# <VirtualHost> definition.  These values also provide defaults for
# any <VirtualHost> containers you may define later in the file.
#
# All of these directives may appear inside <VirtualHost> containers,
# in which case these default settings will be overridden for the
# virtual host being defined.
#

#
# ServerAdmin: Your address, where problems with the server should be
# e-mailed.  This address appears on some server-generated pages, such
# as error documents.  e.g. admin@your-domain.com
#
ServerAdmin root@localhost

#
# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If this is not set to valid DNS name for your host, server-generated
# redirections will not work.  See also the UseCanonicalName directive.
#
# If your host doesn\'t have a registered DNS name, enter its IP address here.
# You will have to access it by its address anyway, and this will make
# redirections work in a sensible way.
#
#ServerName www.example.com:80

#
# UseCanonicalName: Determines how Apache constructs self-referencing
# URLs and the SERVER_NAME and SERVER_PORT variables.
# When set "Off", Apache will use the Hostname and Port supplied
# by the client.  When set "On", Apache will use the value of the
# ServerName directive.
#
UseCanonicalName Off

#
# DocumentRoot: The directory out of which you will serve your
# documents. By default, all requests are taken from this directory, but
# symbolic links and aliases may be used to point to other locations.
#
DocumentRoot "/var/www/html"

#
# Each directory to which Apache has access can be configured with respect
# to which services and features are allowed and/or disabled in that
# directory (and its subdirectories).
#
# First, we configure the "default" to be a very restrictive set of
# features.
#
<Directory />
    Options FollowSymLinks
    AllowOverride None
</Directory>

#
# Note that from this point forward you must specifically allow
# particular features to be enabled - so if something\'s not working as
# you might expect, make sure that you have specifically enabled it
# below.
#

#
# This should be changed to whatever you set DocumentRoot to.
#
<Directory "/var/www/html">

#
# Possible values for the Options directive are "None", "All",
# or any combination of:
#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
#
# Note that "MultiViews" must be named *explicitly* --- "Options All"
# doesn\'t give it to you.
#
# The Options directive is both complicated and important.  Please see
# http://httpd.apache.org/docs/2.2/mod/core.html#options
# for more information.
#
    Options Indexes FollowSymLinks

#
# AllowOverride controls what directives may be placed in .htaccess files.
# It can be "All", "None", or any combination of the keywords:
#   Options FileInfo AuthConfig Limit
#
    AllowOverride None

#
# Controls who can get stuff from this server.
#
    Order allow,deny
    Allow from all

</Directory>

#
# UserDir: The name of the directory that is appended onto a user\'s home
# directory if a ~user request is received.
#
# The path to the end user account \'public_html\' directory must be
# accessible to the webserver userid.  This usually means that ~userid
# must have permissions of 711, ~userid/public_html must have permissions
# of 755, and documents contained therein must be world-readable.
# Otherwise, the client will only receive a "403 Forbidden" message.
#
# See also: http://httpd.apache.org/docs/misc/FAQ.html#forbidden
#
<IfModule mod_userdir.c>
    #
    # UserDir is disabled by default since it can confirm the presence
    # of a username on the system (depending on home directory
    # permissions).
    #
    UserDir disabled

    #
    # To enable requests to /~user/ to serve the user\'s public_html
    # directory, remove the "UserDir disabled" line above, and uncomment
    # the following line instead:
    #
    #UserDir public_html

</IfModule>

#
# Control access to UserDir directories.  The following is an example
# for a site where these directories are restricted to read-only.
#
#<Directory /home/*/public_html>
#    AllowOverride FileInfo AuthConfig Limit
#    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
#    <Limit GET POST OPTIONS>
#        Order allow,deny
#        Allow from all
#    </Limit>
#    <LimitExcept GET POST OPTIONS>
#        Order deny,allow
#        Deny from all
#    </LimitExcept>
#</Directory>

#
# DirectoryIndex: sets the file that Apache will serve if a directory
# is requested.
#
# The index.html.var file (a type-map) is used to deliver content-
# negotiated documents.  The MultiViews Option can be used for the
# same purpose, but it is much slower.
#
DirectoryIndex index.html index.html.var

#
# AccessFileName: The name of the file to look for in each directory
# for additional configuration directives.  See also the AllowOverride
# directive.
#
AccessFileName .htaccess

#
# The following lines prevent .htaccess and .htpasswd files from being
# viewed by Web clients.
#
<Files ~ "^\.ht">
    Order allow,deny
    Deny from all
    Satisfy All
</Files>

#
# TypesConfig describes where the mime.types file (or equivalent) is
# to be found.
#
TypesConfig /etc/mime.types

#
# DefaultType is the default MIME type the server will use for a document
# if it cannot otherwise determine one, such as from filename extensions.
# If your server contains mostly text or HTML documents, "text/plain" is
# a good value.  If most of your content is binary, such as applications
# or images, you may want to use "application/octet-stream" instead to
# keep browsers from trying to display binary files as though they are
# text.
#
DefaultType text/plain

#
# The mod_mime_magic module allows the server to use various hints from the
# contents of the file itself to determine its type.  The MIMEMagicFile
# directive tells the module where the hint definitions are located.
#
<IfModule mod_mime_magic.c>
#   MIMEMagicFile /usr/share/magic.mime
    MIMEMagicFile conf/magic
</IfModule>

#
# HostnameLookups: Log the names of clients or just their IP addresses
# e.g., www.apache.org (on) or 204.62.129.132 (off).
# The default is off because it\'d be overall better for the net if people
# had to knowingly turn this feature on, since enabling it means that
# each client request will result in AT LEAST one lookup request to the
# nameserver.
#
HostnameLookups Off

#
# EnableMMAP: Control whether memory-mapping is used to deliver
# files (assuming that the underlying OS supports it).
# The default is on; turn this off if you serve from NFS-mounted
# filesystems.  On some systems, turning it off (regardless of
# filesystem) can improve performance; for details, please see
# http://httpd.apache.org/docs/2.2/mod/core.html#enablemmap
#
#EnableMMAP off

#
# EnableSendfile: Control whether the sendfile kernel support is
# used to deliver files (assuming that the OS supports it).
# The default is on; turn this off if you serve from NFS-mounted
# filesystems.  Please see
# http://httpd.apache.org/docs/2.2/mod/core.html#enablesendfile
#
#EnableSendfile off

#
# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host\'s errors will be logged there and not here.
#
ErrorLog logs/error_log

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
LogLevel warn

#
# The following directives define some format nicknames for use with
# a CustomLog directive (see below).
#
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %b" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# "combinedio" includes actual counts of actual bytes received (%I) and sent (%O); this
# requires the mod_logio module to be loaded.
#LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio

#
# The location and format of the access logfile (Common Logfile Format).
# If you do not define any access logfiles within a <VirtualHost>
# container, they will be logged here.  Contrariwise, if you *do*
# define per-<VirtualHost> access logfiles, transactions will be
# logged therein and *not* in this file.
#
#CustomLog logs/access_log common

#
# If you would like to have separate agent and referer logfiles, uncomment
# the following directives.
#
#CustomLog logs/referer_log referer
#CustomLog logs/agent_log agent

#
# For a single logfile with access, agent, and referer information
# (Combined Logfile Format), use the following directive:
#
CustomLog logs/access_log combined

#
# Optionally add a line containing the server version and virtual host
# name to server-generated pages (internal error documents, FTP directory
# listings, mod_status and mod_info output etc., but not CGI generated
# documents or custom error documents).
# Set to "EMail" to also include a mailto: link to the ServerAdmin.
# Set to one of:  On | Off | EMail
#
ServerSignature On
TraceEnable off

#
# Aliases: Add here as many aliases as you need (with no limit). The format is
# Alias fakename realname
#
# Note that if you include a trailing / on fakename then the server will
# require it to be present in the URL.  So "/icons" isn\'t aliased in this
# example, only "/icons/".  If the fakename is slash-terminated, then the
# realname must also be slash terminated, and if the fakename omits the
# trailing slash, the realname must also omit it.
#
# We include the /icons/ alias for FancyIndexed directory listings.  If you
# do not use FancyIndexing, you may comment this out.
#
Alias /icons/ "/var/www/icons/"

<Directory "/var/www/icons">
    Options Indexes MultiViews FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>

#
# WebDAV module configuration section.
#
<IfModule mod_dav_fs.c>
    # Location of the WebDAV lock database.
    DAVLockDB /var/lib/dav/lockdb
</IfModule>

#
# ScriptAlias: This controls which directories contain server scripts.
# ScriptAliases are essentially the same as Aliases, except that
# documents in the realname directory are treated as applications and
# run by the server when requested rather than as documents sent to the client.
# The same rules about trailing "/" apply to ScriptAlias directives as to
# Alias.
#
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

#
# "/var/www/cgi-bin" should be changed to whatever your ScriptAliased
# CGI directory exists, if you have that configured.
#
<Directory "/var/www/cgi-bin">
    AllowOverride None
    Options None
    Order allow,deny
    Allow from all
</Directory>

#
# Redirect allows you to tell clients about documents which used to exist in
# your server\'s namespace, but do not anymore. This allows you to tell the
# clients where to look for the relocated document.
# Example:
# Redirect permanent /foo http://www.example.com/bar

#
# Directives controlling the display of server-generated directory listings.
#

#
# IndexOptions: Controls the appearance of server-generated directory
# listings.
#
IndexOptions FancyIndexing VersionSort NameWidth=* HTMLTable Charset=UTF-8

#
# AddIcon* directives tell the server which icon to show for different
# files or filename extensions.  These are only displayed for
# FancyIndexed directories.
#
AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip

AddIconByType (TXT,/icons/text.gif) text/*
AddIconByType (IMG,/icons/image2.gif) image/*
AddIconByType (SND,/icons/sound2.gif) audio/*
AddIconByType (VID,/icons/movie.gif) video/*

AddIcon /icons/binary.gif .bin .exe
AddIcon /icons/binhex.gif .hqx
AddIcon /icons/tar.gif .tar
AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
AddIcon /icons/a.gif .ps .ai .eps
AddIcon /icons/layout.gif .html .shtml .htm .pdf
AddIcon /icons/text.gif .txt
AddIcon /icons/c.gif .c
AddIcon /icons/p.gif .pl .py
AddIcon /icons/f.gif .for
AddIcon /icons/dvi.gif .dvi
AddIcon /icons/uuencoded.gif .uu
AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
AddIcon /icons/tex.gif .tex
AddIcon /icons/bomb.gif core

AddIcon /icons/back.gif ..
AddIcon /icons/hand.right.gif README
AddIcon /icons/folder.gif ^^DIRECTORY^^
AddIcon /icons/blank.gif ^^BLANKICON^^

#
# DefaultIcon is which icon to show for files which do not have an icon
# explicitly set.
#
DefaultIcon /icons/unknown.gif

#
# AddDescription allows you to place a short description after a file in
# server-generated indexes.  These are only displayed for FancyIndexed
# directories.
# Format: AddDescription "description" filename
#
#AddDescription "GZIP compressed document" .gz
#AddDescription "tar archive" .tar
#AddDescription "GZIP compressed tar archive" .tgz

#
# ReadmeName is the name of the README file the server will look for by
# default, and append to directory listings.
#
# HeaderName is the name of a file which should be prepended to
# directory indexes.
ReadmeName README.html
HeaderName HEADER.html

#
# IndexIgnore is a set of filenames which directory indexing should ignore
# and not include in the listing.  Shell-style wildcarding is permitted.
#
IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t

#
# DefaultLanguage and AddLanguage allows you to specify the language of
# a document. You can then use content negotiation to give a browser a
# file in a language the user can understand.
#
# Specify a default language. This means that all data
# going out without a specific language tag (see below) will
# be marked with this one. You probably do NOT want to set
# this unless you are sure it is correct for all cases.
#
# * It is generally better to not mark a page as
# * being a certain language than marking it with the wrong
# * language!
#
# DefaultLanguage nl
#
# Note 1: The suffix does not have to be the same as the language
# keyword --- those with documents in Polish (whose net-standard
# language code is pl) may wish to use "AddLanguage pl .po" to
# avoid the ambiguity with the common suffix for perl scripts.
#
# Note 2: The example entries below illustrate that in some cases
# the two character \'Language\' abbreviation is not identical to
# the two character \'Country\' code for its country,
# E.g. \'Danmark/dk\' versus \'Danish/da\'.
#
# Note 3: In the case of \'ltz\' we violate the RFC by using a three char
# specifier. There is \'work in progress\' to fix this and get
# the reference data for rfc1766 cleaned up.
#
# Catalan (ca) - Croatian (hr) - Czech (cs) - Danish (da) - Dutch (nl)
# English (en) - Esperanto (eo) - Estonian (et) - French (fr) - German (de)
# Greek-Modern (el) - Hebrew (he) - Italian (it) - Japanese (ja)
# Korean (ko) - Luxembourgeois* (ltz) - Norwegian Nynorsk (nn)
# Norwegian (no) - Polish (pl) - Portugese (pt)
# Brazilian Portuguese (pt-BR) - Russian (ru) - Swedish (sv)
# Simplified Chinese (zh-CN) - Spanish (es) - Traditional Chinese (zh-TW)
#
AddLanguage ca .ca
AddLanguage cs .cz .cs
AddLanguage da .dk
AddLanguage de .de
AddLanguage el .el
AddLanguage en .en
AddLanguage eo .eo
AddLanguage es .es
AddLanguage et .et
AddLanguage fr .fr
AddLanguage he .he
AddLanguage hr .hr
AddLanguage it .it
AddLanguage ja .ja
AddLanguage ko .ko
AddLanguage ltz .ltz
AddLanguage nl .nl
AddLanguage nn .nn
AddLanguage no .no
AddLanguage pl .po
AddLanguage pt .pt
AddLanguage pt-BR .pt-br
AddLanguage ru .ru
AddLanguage sv .sv
AddLanguage zh-CN .zh-cn
AddLanguage zh-TW .zh-tw

#
# LanguagePriority allows you to give precedence to some languages
# in case of a tie during content negotiation.
#
# Just list the languages in decreasing order of preference. We have
# more or less alphabetized them here. You probably want to change this.
#
LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW

#
# ForceLanguagePriority allows you to serve a result page rather than
# MULTIPLE CHOICES (Prefer) [in case of a tie] or NOT ACCEPTABLE (Fallback)
# [in case no accepted languages matched the available variants]
#
ForceLanguagePriority Prefer Fallback

#
# Specify a default charset for all content served; this enables
# interpretation of all content as UTF-8 by default.  To use the
# default browser choice (ISO-8859-1), or to allow the META tags
# in HTML content to override this choice, comment out this
# directive:
#
AddDefaultCharset UTF-8

#
# AddType allows you to add to or override the MIME configuration
# file mime.types for specific file types.
#
#AddType application/x-tar .tgz

#
# AddEncoding allows you to have certain browsers uncompress
# information on the fly. Note: Not all browsers support this.
# Despite the name similarity, the following Add* directives have nothing
# to do with the FancyIndexing customization directives above.
#
#AddEncoding x-compress .Z
#AddEncoding x-gzip .gz .tgz

# If the AddEncoding directives above are commented-out, then you
# probably should define those extensions to indicate media types:
#
AddType application/x-compress .Z
AddType application/x-gzip .gz .tgz

#
#   MIME-types for downloading Certificates and CRLs
#
AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl    .crl

#
# AddHandler allows you to map certain file extensions to "handlers":
# actions unrelated to filetype. These can be either built into the server
# or added with the Action directive (see below)
#
# To use CGI scripts outside of ScriptAliased directories:
# (You will also need to add "ExecCGI" to the "Options" directive.)
#
#AddHandler cgi-script .cgi

#
# For files that include their own HTTP headers:
#
#AddHandler send-as-is asis

#
# For type maps (negotiated resources):
# (This is enabled by default to allow the Apache "It Worked" page
#  to be distributed in multiple languages.)
#
AddHandler type-map var

#
# Filters allow you to process content before it is sent to the client.
#
# To parse .shtml files for server-side includes (SSI):
# (You will also need to add "Includes" to the "Options" directive.)
#
AddType text/html .shtml
AddOutputFilter INCLUDES .shtml

#
# Action lets you define media types that will execute a script whenever
# a matching file is called. This eliminates the need for repeated URL
# pathnames for oft-used CGI file processors.
# Format: Action media/type /cgi-script/location
# Format: Action handler-name /cgi-script/location
#

#
# Customizable error responses come in three flavors:
# 1) plain text 2) local redirects 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
#ErrorDocument 404 /missing.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# Putting this all together, we can internationalize error responses.
#
# We use Alias to redirect any /error/HTTP_<error>.html.var response to
# our collection of by-error message multi-language collections.  We use
# includes to substitute the appropriate text.
#
# You can modify the messages\' appearance without changing any of the
# default HTTP_<error>.html.var files by adding the line:
#
#   Alias /error/include/ "/your/include/path/"
#
# which allows you to create your own set of files by starting with the
# /var/www/error/include/ files and
# copying them to /your/include/path/, even on a per-VirtualHost basis.
#

Alias /error/ "/var/www/error/"

<IfModule mod_negotiation.c>
<IfModule mod_include.c>
    <Directory "/var/www/error">
        AllowOverride None
        Options IncludesNoExec
        AddOutputFilter Includes html
        AddHandler type-map var
        Order allow,deny
        Allow from all
        LanguagePriority en es de fr
        ForceLanguagePriority Prefer Fallback
    </Directory>

#    ErrorDocument 400 /error/HTTP_BAD_REQUEST.html.var
#    ErrorDocument 401 /error/HTTP_UNAUTHORIZED.html.var
#    ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var
#    ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var
#    ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var
#    ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
#    ErrorDocument 410 /error/HTTP_GONE.html.var
#    ErrorDocument 411 /error/HTTP_LENGTH_REQUIRED.html.var
#    ErrorDocument 412 /error/HTTP_PRECONDITION_FAILED.html.var
#    ErrorDocument 413 /error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var
#    ErrorDocument 414 /error/HTTP_REQUEST_URI_TOO_LARGE.html.var
#    ErrorDocument 415 /error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var
#    ErrorDocument 500 /error/HTTP_INTERNAL_SERVER_ERROR.html.var
#    ErrorDocument 501 /error/HTTP_NOT_IMPLEMENTED.html.var
#    ErrorDocument 502 /error/HTTP_BAD_GATEWAY.html.var
#    ErrorDocument 503 /error/HTTP_SERVICE_UNAVAILABLE.html.var
#    ErrorDocument 506 /error/HTTP_VARIANT_ALSO_VARIES.html.var

</IfModule>
</IfModule>

#
# The following directives modify normal HTTP response behavior to
# handle known problems with browser implementations.
#
BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0

#
# The following directive disables redirects on non-GET requests for
# a directory that does not include the trailing slash.  This fixes a
# problem with Microsoft WebFolders which does not appropriately handle
# redirects for folders with DAV methods.
# Same deal with Apple\'s DAV filesystem and Gnome VFS support for DAV.
#
BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
BrowserMatch "MS FrontPage" redirect-carefully
BrowserMatch "^WebDrive" redirect-carefully
BrowserMatch "^WebDAVFS/1.[0123]" redirect-carefully
BrowserMatch "^gnome-vfs/1.0" redirect-carefully
BrowserMatch "^XML Spy" redirect-carefully
BrowserMatch "^Dreamweaver-WebDAV-SCM1" redirect-carefully

#
# Allow server status reports generated by mod_status,
# with the URL of http://servername/server-status
# Change the ".example.com" to match your domain to enable.
#
#<Location /server-status>
#    SetHandler server-status
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Location>

#
# Allow remote server configuration reports, with the URL of
#  http://servername/server-info (requires that mod_info.c be loaded).
# Change the ".example.com" to match your domain to enable.
#
#<Location /server-info>
#    SetHandler server-info
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Location>

#
# Proxy Server directives. Uncomment the following lines to
# enable the proxy server:
#
#<IfModule mod_proxy.c>
#ProxyRequests On
#
#<Proxy *>
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Proxy>

#
# Enable/disable the handling of HTTP/1.1 "Via:" headers.
# ("Full" adds the server version; "Block" removes all outgoing Via: headers)
# Set to one of: Off | On | Full | Block
#
#ProxyVia On

#
# To enable a cache of proxied content, uncomment the following lines.
# See http://httpd.apache.org/docs/2.2/mod/mod_cache.html for more details.
#
#<IfModule mod_disk_cache.c>
#   CacheEnable disk /
#   CacheRoot "/var/cache/mod_proxy"
#</IfModule>
#

#</IfModule>
# End of proxy directives.

### Section 3: Virtual Hosts
#
# VirtualHost: If you want to maintain multiple domains/hostnames on your
# machine you can setup VirtualHost containers for them. Most configurations
# use only name-based virtual hosts so the server doesn\'t need to worry about
# IP addresses. This is indicated by the asterisks in the directives below.
#
# Please see the documentation at
# <URL:http://httpd.apache.org/docs/2.2/vhosts/>
# for further details before you try to setup virtual hosts.
#
# You may use the command line option \'-S\' to verify your virtual host
# configuration.

#
# Use name-based virtual hosting.
#
#NameVirtualHost *:80
#
# NOTE: NameVirtualHost cannot be used without a port specifier
# (e.g. :80) if mod_ssl is being used, due to the nature of the
# SSL protocol.
#

#
# VirtualHost example:
# Almost any Apache directive may go into a VirtualHost container.
# The first VirtualHost section is used for requests without a known
# server name.
#
#<VirtualHost *:80>
#    ServerAdmin webmaster@dummy-host.example.com
#    DocumentRoot /www/docs/dummy-host.example.com
#    ServerName dummy-host.example.com
#    ErrorLog logs/dummy-host.example.com-error_log
#    CustomLog logs/dummy-host.example.com-access_log common
#</VirtualHost>
',
  group   => 'root',
  mode    => '0644',
  notify  => Service[httpd],
  owner   => 'root',
  require => [ File[/etc/httpd], File[/etc/httpd/conf/], File[/etc/httpd/conf.d/] ],
}

file { '/etc/httpd' :
  ensure => 'directory',
}

file { '/etc/localtime' :
  ensure => 'present',
  target => '/usr/share/zoneinfo/UTC',
}

file { '/etc/xinetd.conf' :
  content => 'defaults
{
    log_type = SYSLOG daemon info
    log_on_failure = HOST
    log_on_success = PID HOST DURATION EXIT

    cps	= 50 10
    instances = 50
    per_source = 10

    v6only = no

    groups = yes
    umask  = 002
}

includedir /etc/xinetd.d
',
  group   => 'root',
  mode    => '0600',
  notify  => Service[xinetd],
  owner   => 'root',
  require => [ Package[xinetd], Package[tftp-server], Package[syslinux], Package[wget], Package[python-ipaddr], Package[fence-agents], Package[bind-utils] ],
}

file { '/usr/lib/python2.6/site-packages/cobbler/late_command.py' :
  content => '#!/usr/bin/python
#
#    Copyright (C) 2011 Mirantis Inc.
#
#    Authors: Vladimir Kozhukalov <vkozhukalov@mirantis.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

from base64 import b64encode
from cStringIO import StringIO
from gzip import GzipFile


TEMPLATE_FILE = (
    "sh -c \'filename=${1}; shift; echo ${0} | base64 --decode | "
    "gunzip -c > ${filename} && chmod %(mode)s ${filename}\' "
    "%(content64)s %(destfile)s"
)


TEMPLATE_COMMAND = (
    "sh -c \'echo ${0} | base64 --decode | gunzip -c | sh -\' %(content64)s"
)


TEMPLATE_FILE_PLAIN = (
    "sh -c \'filename=${1}; shift; echo ${0} | base64 --decode "
    "> ${filename} && chmod %(mode)s ${filename}\' "
    "%(content64)s %(destfile)s"
)


TEMPLATE_COMMAND_PLAIN = (
    "sh -c \'echo ${0} | base64 --decode | sh -\' %(content64)s"
)


def base64_gzip(content, gzip=True):
    """Gzip and enconde bas64 provided content

    This method returns content gzipped and then base64 encoded
    so such line can be inserted into preseed file
    """
    if gzip:
        gzipped = StringIO()
        gzip_file = GzipFile(fileobj=gzipped, mode="wb", compresslevel=9)
        gzip_file.write(content)
        gzip_file.close()
        content2 = gzipped.getvalue()
    else:
        content2 = content
    return b64encode(content2)


def get_content(source, source_method):
    if source_method == \'file\':
        try:
            f = open(source, \'r\')
            content = f.read()
            f.close()
        except Exception:
            return ""
        else:
            return content
    return source


def get_content64(source, source_method, gzip=True):
    return base64_gzip(get_content(source, source_method), gzip).strip()


def late_file(source, destfile, source_method=\'file\', mode=\'0644\', gzip=True):
    if gzip:
        return TEMPLATE_FILE % {
            \'mode\': mode,
            \'content64\': get_content64(source, source_method, True),
            \'destfile\': destfile,
        }
    else:
        return TEMPLATE_FILE_PLAIN % {
            \'mode\': mode,
            \'content64\': get_content64(source, source_method, False),
            \'destfile\': destfile,
        }


def late_command(source, source_method=\'file\', gzip=True):
    if gzip:
        return TEMPLATE_COMMAND % {
            \'content64\': get_content64(source, source_method, True)
        }
    else:
        return TEMPLATE_COMMAND_PLAIN % {
            \'content64\': get_content64(source, source_method, False)
        }
',
  group   => 'root',
  mode    => '0644',
  owner   => 'root',
}

file { '/usr/lib/python2.6/site-packages/cobbler/pmanager.py' :
  content => '#!/usr/bin/env python

import json
import math
import re


class PManager(object):
    def __init__(self, pm_data):
        if isinstance(pm_data, (str, unicode)):
            self.pm_data = json.loads(pm_data)
        else:
            self.pm_data = pm_data

        self.data = self.pm_data[\'ks_spaces\']
        self.kernel_params = self.pm_data[\'kernel_params\']

        self.factor = 1
        self.unit = "MiB"
        self._pre = []
        self._kick = []
        self._post = []
        self.raid_count = 0

        self._pcount = {}
        self._pend = {}
        self._rcount = 0
        self._pvcount = 0

    def _pseparator(self, devname):
        pseparator = \'\'
        if \'cciss\' in devname or \'nvme\' in devname:
            pseparator = \'p\'
        return pseparator

    def pcount(self, disk_id, increment=0):
        self._pcount[disk_id] = self._pcount.get(disk_id, 0) + increment
        return self._pcount.get(disk_id, 0)

    def psize(self, disk_id, increment=0):
        self._pend[disk_id] = self._pend.get(disk_id, 0) + increment
        return self._pend.get(disk_id, 0)

    def rcount(self, increment=0):
        self._rcount += increment
        return self._rcount

    def pvcount(self, increment=0):
        self._pvcount += increment
        return self._pvcount

    def pre(self, command=None):
        if command:
            return self._pre.append(command)
        return self._pre

    def kick(self, command=None):
        if command:
            return self._kick.append(command)
        return self._kick

    def post(self, command=None):
        if command:
            return self._post.append(command)
        return self._post

    def _disk_dev(self, disk):
        command = "$(readlink -f $( ("
        command += " || ".join(["ls /dev/{0}".format(d)
                                for d in disk.get("extra", [])])
        if disk["extra"]:
            command += " || "
        command += "ls /dev/{0}".format(disk["id"])
        command += ") 2>/dev/null) )"
        return command

    def iterdisks(self):
        for item in self.data:
            if item["type"] == "disk" and item["size"] > 0:
                yield item

    def get_partition_count(self, name):
        count = 0
        for disk in self.iterdisks():
            count += len([v for v in disk["volumes"]
                          if v.get(\'name\') == name and v[\'size\'] > 0])
        return count

    def num_ceph_journals(self):
        return self.get_partition_count(\'cephjournal\')

    def num_ceph_osds(self):
        return self.get_partition_count(\'ceph\')

    def _gettabfstype(self, vol):
        if vol.get("file_system"):
            return vol["file_system"]
        elif vol["mount"] == "/":
            return "ext4"
        elif vol["mount"] == "/boot":
            return "ext3"
        elif vol["mount"] == "swap":
            return "swap"
        return "xfs"

    def _gettabfsoptions(self, vol):
        if self._gettabfstype(vol) == "xfs":
            return "-f"
        return ""

    def _getfstype(self, vol):
        fstype = self._gettabfstype(vol)
        if fstype == "swap":
            return ""
        return "--fstype=%s" % fstype

    def _getlabel(self, label):
        if not label:
            return ""
        # XFS will refuse to format a partition if the
        # disk label is > 12 characters.
        return " -L {0} ".format(label[:12])

    def _parttype(self, n):
        return "primary"

    def _getsize(self, vol):
        """Get volume size.

        Anaconda has hard coded limitation in 16TB
        for ext3/4 and xfs filesystems (the only filesystems
        we are supposed to use). Besides there is no stable
        64-bit ext4 implementation at the moment, so the
        limitation in 16TB for ext4 is not only
        anaconda limitation.
        Root partition can not be located on xfs file system
        therefore we check if root filesystem is larger
        than 16TB and set it size into 16TB if it is larger.
        It is necessary to note that to format 16TB
        volume on ext4 it is needed about 1G memory.
        """
        if vol["size"] > 16777216 and vol["mount"] == "/":
            return 16777216
        return vol["size"]

    def erase_lvm_metadata(self):
        self.pre("for v in $(vgs | awk \'{print $1}\'); do "
                 "vgreduce -f --removemissing $v; vgremove -f $v; done")
        self.pre("for p in $(pvs | grep \'\/dev\' | awk \'{print $1}\'); do "
                 "pvremove -ff -y $p ; done")

    def erase_raid_metadata(self):
        for disk in self.iterdisks():
            self.pre("mdadm --zero-superblock --force {0}*"
                     "".format(self._disk_dev(disk)))

    def clean(self, disk):
        self.pre("hdparm -z {0}".format(self._disk_dev(disk)))
        self.pre("test -e {0} && dd if=/dev/zero "
                 "of={0} bs=1M count=10".format(
                     self._disk_dev(disk)))
        self.pre("sleep 10")
        self.pre("hdparm -z {0}".format(self._disk_dev(disk)))

    def gpt(self, disk):
        self.pre("parted -s {0} mklabel gpt".format(self._disk_dev(disk)))

    def bootable(self, disk):
        """Create and mark Bios Boot partition

        Grub will embed its code later, useable for legacy boot.
        May be way smaller, but be aware that the parted may
        shrink 1M partition to zero at some disks and versions.
        """
        self.pre("parted -a optimal -s {0} "
                 "unit {3} mkpart primary {1} {2}".format(
                     self._disk_dev(disk),
                     self.psize(disk["id"]),
                     self.psize(disk["id"], 24 * self.factor),
                     self.unit))
        self.pre("parted -s {0} set {1} bios_grub on".format(
            self._disk_dev(disk),
            self.pcount(disk["id"], 1)))

        """Create partition for the EFI boot, minimum
        size is 100M, recommended is 200M, with fat32 and
        future mountpoint in the /boot/efi. There is also
        \'/usr/sbin/parted -s /dev/sda set 2 boot on\'
        which is strictly needed for EFI boot."""
        self.pre("parted -a optimal -s {0} "
                 "unit {3} mkpart primary fat32 {1} {2}".format(
                     self._disk_dev(disk),
                     self.psize(disk["id"]),
                     self.psize(disk["id"], 200 * self.factor),
                     self.unit))
        self.pre("parted -s {0} set {1} boot on".format(
            self._disk_dev(disk),
            self.pcount(disk["id"], 1)))

    def boot(self):
        self.plains(volume_filter=lambda x: x["mount"] == "/boot")
        self.raids(volume_filter=lambda x: x["mount"] == "/boot")

    def notboot(self):
        self.plains(volume_filter=lambda x: x["mount"] != "/boot")
        self.raids(volume_filter=lambda x: x["mount"] != "/boot")

    def plains(self, volume_filter=None):
        if not volume_filter:
            volume_filter = default_volume_filter

        ceph_osds = self.num_ceph_osds()
        journals_left = ceph_osds
        ceph_journals = self.num_ceph_journals()

        for disk in self.iterdisks():
            for part in filter(lambda p: p["type"] == "partition" and
                               volume_filter(p), disk["volumes"]):
                if part["size"] <= 0:
                    continue

                if part.get(\'name\') == \'cephjournal\':
                    # We need to allocate a journal partition for each ceph OSD
                    # Determine the number of journal partitions we need on
                    # each device
                    ratio = math.ceil(float(ceph_osds) / ceph_journals)

                    # No more than 10GB will be allocated to a single
                    # journal partition
                    size = part["size"] / ratio
                    if size > 10240:
                        size = 10240

                    # This will attempt to evenly spread partitions across
                    # multiple devices e.g. 5 osds with 2 journal devices will
                    # create 3 partitions on the first device and 2 on the
                    # second
                    if ratio < journals_left:
                        end = ratio
                    else:
                        end = journals_left

                    for i in range(0, end):
                        journals_left -= 1
                        pcount = self.pcount(disk["id"], 1)

                        self.pre("parted -a optimal -s /dev/{0} "
                                 "unit {4} mkpart {1} {2} {3}".format(
                                     disk["id"],
                                     self._parttype(pcount),
                                     self.psize(disk["id"]),
                                     self.psize(disk["id"],
                                                size * self.factor),
                                     self.unit))

                        self.post("chroot /mnt/sysimage sgdisk "
                                  "--typecode={0}:{1} /dev/{2}".format(
                                      pcount, part["partition_guid"],
                                      disk["id"]))
                    continue

                pcount = self.pcount(disk["id"], 1)
                self.pre("parted -a optimal -s {0} "
                         "unit {4} mkpart {1} {2} {3}".format(
                             self._disk_dev(disk),
                             self._parttype(pcount),
                             self.psize(disk["id"]),
                             self.psize(disk["id"],
                                        part["size"] * self.factor),
                             self.unit))

                size = self._getsize(part)
                tabmount = part["mount"] if part["mount"] != "swap" else "none"
                tabfstype = self._gettabfstype(part)
                tabfsoptions = self._gettabfsoptions(part)
                if part.get("partition_guid"):
                    self.post("chroot /mnt/sysimage sgdisk "
                              "--typecode={0}:{1} {2}".format(
                                  pcount, part["partition_guid"],
                                  self._disk_dev(disk)))
                if size > 0 and size <= 16777216 and part["mount"] != "none" \
                        and tabfstype != "xfs":
                    self.kick("partition {0} "
                              "--onpart={2}"
                              "{3}{4}".format(part["mount"], size,
                                              self._disk_dev(disk),
                                              self._pseparator(disk[\'name\']),
                                              pcount))

                else:
                    if part["mount"] != "swap" and tabfstype != "none":
                        disk_label = self._getlabel(part.get(\'disk_label\'))
                        self.post("mkfs.{0} {1} {2}"
                                  "{3}{4} {5}".format(
                                      tabfstype,
                                      tabfsoptions,
                                      self._disk_dev(disk),
                                      self._pseparator(disk[\'name\']),
                                      pcount, disk_label))
                        if part["mount"] != "none":
                            self.post("mkdir -p /mnt/sysimage{0}".format(
                                part["mount"]))

                    if tabfstype != "none":
                        self.post("echo \'UUID=$(blkid -s UUID -o value "
                                  "{0}{1}{2}) "
                                  "{3} {4} defaults 0 0\'"
                                  " >> /mnt/sysimage/etc/fstab".format(
                                      self._disk_dev(disk),
                                      self._pseparator(disk[\'name\']),
                                      pcount, tabmount, tabfstype))

    def raids(self, volume_filter=None):
        if not volume_filter:
            volume_filter = default_volume_filter
        raids = {}
        raid_info = {}
        phys = {}
        for disk in self.iterdisks():
            for raid in filter(lambda p: p["type"] == "raid" and
                               volume_filter(p), disk["volumes"]):
                if raid["size"] <= 0:
                    continue
                raid_info[raid["mount"]] = raid
                pcount = self.pcount(disk["id"], 1)
                if not phys.get(raid["mount"]):
                    phys[raid["mount"]] = []
                phys[raid["mount"]].append(
                    "{0}{1}{2}".format(
                        self._disk_dev(disk),
                        self._pseparator(disk[\'name\']), pcount))
                rname = "raid.{0:03d}".format(self.rcount(1))
                begin_size = self.psize(disk["id"])
                end_size = self.psize(disk["id"], raid["size"] * self.factor)
                self.pre("parted -a optimal -s {0} "
                         "unit {4} mkpart {1} {2} {3}".format(
                             self._disk_dev(disk), self._parttype(pcount),
                             begin_size, end_size, self.unit))
                self.kick("partition {0} "
                          "--onpart={2}{3}{4}"
                          "".format(rname, raid["size"], self._disk_dev(disk),
                                    self._pseparator(disk[\'name\']), pcount))

                if not raids.get(raid["mount"]):
                    raids[raid["mount"]] = []
                raids[raid["mount"]].append(rname)

        for (num, (mount, rnames)) in enumerate(raids.iteritems()):
            raid = raid_info[mount]
            fstype = self._gettabfstype(raid)
            fsoptions = self._gettabfsoptions(raid)
            label = raid.get(\'disk_label\')
            # Anaconda won\'t label a RAID array. It also can\'t create
            # a single-drive RAID1 array, but mdadm can.
            if label or len(rnames) == 1:
                if len(rnames) == 1:
                    phys[mount].append(\'missing\')
                self.post("mdadm --create /dev/md{0} --run --level=1 "
                          "--raid-devices={1} {2}".format(
                              self.raid_count, len(phys[mount]),
                              \' \'.join(phys[mount])))
                self.post("mkfs.{0} {1} {2} /dev/md{3}".format(
                          fstype, fsoptions,
                          self._getlabel(label), self.raid_count))
                self.post("mdadm --detail --scan | grep \'\/dev\/md{0}\'"
                          ">> /mnt/sysimage/etc/mdadm.conf".format(
                              self.raid_count))
                self.post("mkdir -p /mnt/sysimage{0}".format(mount))
                self.post("echo \\\"UUID=\$(blkid -s UUID -o value "
                          "/dev/md{0}) "
                          "{1} {2} defaults 0 0\\\""
                          " >> /mnt/sysimage/etc/fstab".format(
                              self.raid_count, mount, fstype))
            else:
                self.kick("raid {0} --device md{1} --fstype {3} "
                          "--level=RAID1 {2}".format(
                              mount, self.raid_count,
                              " ".join(rnames), fstype))
            self.raid_count += 1

    def pvs(self):
        pvs = {}
        for disk in self.iterdisks():
            for pv in [p for p in disk["volumes"] if p["type"] == "pv"]:
                if pv["size"] <= 0:
                    continue
                pcount = self.pcount(disk["id"], 1)
                pvname = "pv.{0:03d}".format(self.pvcount(1))
                begin_size = self.psize(disk["id"])
                end_size = self.psize(disk["id"], pv["size"] * self.factor)
                self.pre("parted -a optimal -s {0} "
                         "unit {4} mkpart {1} {2} {3}".format(
                             self._disk_dev(disk), self._parttype(pcount),
                             begin_size, end_size, self.unit))
                self.kick("partition {0} "
                          "--onpart={2}{3}{4}"
                          "".format(pvname, pv["size"], self._disk_dev(disk),
                                    self._pseparator(disk[\'name\']), pcount))

                if not pvs.get(pv["vg"]):
                    pvs[pv["vg"]] = []
                pvs[pv["vg"]].append(pvname)

        for vg, pvnames in pvs.iteritems():
            self.kick("volgroup {0} {1}".format(vg, " ".join(pvnames)))

    def lvs(self):
        for vg in [g for g in self.data if g["type"] == "vg"]:
            for lv in vg["volumes"]:
                if lv["size"] <= 0:
                    continue
                fstype = self._getfstype(lv)
                size = self._getsize(lv)
                tabmount = lv["mount"] if lv["mount"] != "swap" else "none"
                tabfstype = self._gettabfstype(lv)
                tabfsoptions = self._gettabfsoptions(lv)

                if size > 0 and size <= 16777216 and tabfstype != "xfs":
                    self.kick("logvol {0} --vgname={1} --size={2} "
                              "--name={3} {4}".format(
                                  lv["mount"], vg["id"], size,
                                  lv["name"], fstype))
                else:
                    self.post("lvcreate --size {0} --name {1} {2}".format(
                        size, lv["name"], vg["id"]))
                    if lv["mount"] != "swap" and tabfstype != "none":
                        self.post("mkfs.{0} {1} /dev/mapper/{2}-{3}".format(
                            tabfstype, tabfsoptions, vg["id"], lv["name"]))
                        self.post("mkdir -p /mnt/sysimage{0}"
                                  "".format(lv["mount"]))

                    if tabfstype != "none":
                        """
                        The name of the device. An LVM device is
                        expressed as the volume group name and the logical
                        volume name separated by a hyphen. A hyphen in
                        the original name is translated to two hyphens.
                        """
                        self.post("echo \'/dev/mapper/{0}-{1} {2} {3} "
                                  "defaults 0 0\'"
                                  " >> /mnt/sysimage/etc/fstab".format(
                                      vg["id"].replace("-", "--"),
                                      lv["name"].replace("-", "--"),
                                      tabmount, tabfstype))

    def bootloader(self):
        devs = []
        for disk in self.iterdisks():
            devs.append("$(basename {0})"
                        "".format(self._disk_dev(disk)))
        if devs:
            self.kick("bootloader --location=mbr --driveorder={0} "
                      "--append=\' {1} \'".format(
                          ",".join(devs),
                          self.kernel_params))

            for dev in devs:
                self.post("echo -n > /tmp/grub.script")
                self.post("echo \\\"device (hd0) /dev/{0}\\\" >> "
                          "/tmp/grub.script".format(dev))
                """
                This means that we set drive geometry manually into to
                avoid grub register overlapping. We set it so that grub
                thinks disk size is equal to 1G.
                130 cylinders * (16065 * 512 = 8225280 bytes) = 1G
                """
                self.post("echo \\\"geometry (hd0) 130 255 63\\\" >> "
                          "/tmp/grub.script")
                self.post("echo \\\"root (hd0,2)\\\" >> /tmp/grub.script")
                self.post("echo \\\"install /grub/stage1 (hd0) /grub/stage2 p "
                          "/grub/grub.conf\\\" >> /tmp/grub.script")
                self.post("echo quit >> /tmp/grub.script")
                self.post("cat /tmp/grub.script | chroot /mnt/sysimage "
                          "/sbin/grub --no-floppy --batch")

    def expose(self,
               kickfile="/tmp/partition.ks",
               postfile="/tmp/post_partition.ks"):
        result = ""
        for pre in self.pre():
            result += "{0}\n".format(pre)

        result += "echo > {0}\n".format(kickfile)
        for kick in self.kick():
            result += "echo \"{0}\" >> {1}\n".format(kick, kickfile)

        result += "echo \"%post --nochroot\" > {0}\n".format(postfile)
        result += "echo \"set -x -v\" >> {0}\n".format(postfile)
        result += ("echo \"exec 1>/mnt/sysimage/root/post-partition.log "
                   "2>&1\" >> {0}\n".format(postfile))
        for post in self.post():
            result += "echo \"{0}\" >> {1}\n".format(post, postfile)
        result += "echo \"%end\" >> {0}\n".format(postfile)
        return result

    def eval(self):
        for disk in self.iterdisks():
            self.clean(disk)
            self.gpt(disk)
            self.bootable(disk)
        self.boot()
        self.notboot()
        self.pvs()
        self.lvs()
        self.bootloader()
        self.pre("sleep 10")
        for disk in self.iterdisks():
            self.pre("hdparm -z {0}".format(self._disk_dev(disk)))
        self.erase_lvm_metadata()
        self.erase_raid_metadata()


class PreseedPManager(object):
    def __init__(self, pm_data):
        if isinstance(pm_data, (str, unicode)):
            self.pm_data = json.loads(pm_data)
        else:
            self.pm_data = pm_data

        self.data = self.pm_data[\'ks_spaces\']
        self.kernel_params = self.pm_data[\'kernel_params\']

        # enumerating disks
        for num, item in enumerate(
                [d for d in self.data if d["type"] == "disk"]):
            item["enum"] = num

        self.validate()
        self.factor = 1
        self.unit = "MiB"
        self.disks = sorted([self._disk_dev(d) for d in self.iterdisks()])
        self.os_disk = self.os_disks()[0]

        self._pcount = {}
        self._pend = {}
        self._recipe = []
        self._late = []
        self._early = []

    def os_disks(self):
        return [self._disk_dev(d) for d in self.iterdisks() if
                filter(lambda x: x.get("vg") == "os" and
                       x.get("size") > 0, d["volumes"])]

    def validate(self):
        # os volume group can not be distributed over more than one disk.
        # it is because we use plain partition for / and swap on ubuntu.
        if len(self.os_disks()) > 1:
            raise Exception("OS volume group must be located on one disk")

    def _disk_by_links(self, disk):
        command = "$(readlink -f $( ("
        command += " || ".join(["ls /dev/{0}".format(d)
                                for d in disk.get("extra", [])])
        if disk["extra"]:
            command += " || "
        command += "ls /dev/{0}".format(disk["id"])
        command += ") 2>/dev/null) )"
        return command

    def _disk_dev(self, disk):
        return "${{DISK_{0}}}".format(disk["enum"])

    def disks_map(self):
        command = ""
        for disk in self.iterdisks():
            command += "export DISK_{0}={1}; ".format(
                disk["enum"], self._disk_by_links(disk))
        return command

    def iterdisks(self):
        for item in self.data:
            if item["type"] == "disk" and item["size"] > 0:
                yield item

    def recipe(self, command=None):
        if command:
            return self._recipe.append(command)
        return self._recipe

    def late(self, command=None, in_target=False, udev_settle=False):
        if command:
            if udev_settle:
                # this gonna wait until udev event queue is handled
                # and avoid appearing udev race condition.
                # for example http://permalink.gmane.org/gmane.linux.raid/34027
                self._late.append(("/sbin/udevadm settle", False))
            return self._late.append((command, in_target))
        return self._late

    def early(self, command=None):
        if command:
            return self._early.append(command)
        return self._early

    def _pseparator(self, devname):
        pseparator = \'\'
        if \'cciss\' in devname or \'nvme\' in devname:
            pseparator = \'p\'
        return pseparator

    def _getlabel(self, label):
        if not label:
            return ""
        # XFS will refuse to format a partition if the
        # disk label is > 12 characters.
        return " -L {0} ".format(label[:12])

    def _parttype(self, n):
        return "primary"

    def _fsoptions(self, fstype):
        if fstype == "xfs":
            return "-f"
        return ""

    def _umount_target(self):
        self.late("umount /target/dev")
        self.late("umount /target/sys")
        self.late("umount /target/proc")
        self.late("umount /target/boot")
        self.late("umount /target")
        self.late("umount {0}{1}3".format(
            self.os_disk, self._pseparator(self.os_disk)))
        self.late("swapoff {0}{1}4".format(
            self.os_disk, self._pseparator(self.os_disk)))

    def _mount_target(self):
        self.late("mount {0}{1}3 /target".format(
            self.os_disk, self._pseparator(self.os_disk)))
        self.late("mount {0}{1}2 /target/boot".format(
            self.os_disk, self._pseparator(self.os_disk)))
        self.late("mount -t proc none /target/proc")
        self.late("mount -o bind /dev /target/dev")
        self.late("mount -o bind /sys /target/sys")
        self.late("swapon {0}{1}4".format(
            self.os_disk, self._pseparator(self.os_disk)))

    def _long_logger(self):
        """Create script for logging long lines.

        This method puts script which splits
        long line and sends them to logger
        #!/bin/sh
        chunk=80
        while read string; do
            iterations=`expr ${#string} / $chunk + 1`; i=0;
            while [ $i -le $(( iterations - 1)) ]; do
                start_sym=$(( $i * ${chunk} + 1 ))
                end_sym=$(( $(( $i + 1 )) * ${chunk}))
                echo $string | cut -c ${start_sym}-${end_sym} | logger
                i=$(( i + 1 )); done; done;
        """
        return (
            "echo \'#!/bin/sh\' > /tmp/long_logger.sh;",
            "echo \'chunk=80;\' >> /tmp/long_logger.sh;",
            "echo \'while read string; do\' >> /tmp/long_logger.sh;",
            ("echo \'iterations=`expr ${#string} / $chunk + 1`; i=0;\' "
                ">> /tmp/long_logger.sh;"),
            ("echo \'while [ $i -le $(( iterations - 1)) ]; do\' "
                ">> /tmp/long_logger.sh;"),
            ("echo \'start_sym=$(( $i * ${chunk} + 1 ))\' "
                ">> /tmp/long_logger.sh;"),
            ("echo \'end_sym=$(( $(( $i + 1 )) * ${chunk}))\' "
                ">> /tmp/long_logger.sh;"),
            ("echo \'echo $string | cut -c ${start_sym}-${end_sym} | logger\' "
                ">> /tmp/long_logger.sh;"),
            "echo \'i=$(( i + 1 )); done; done;\' >> /tmp/long_logger.sh;",
            "chmod +x /tmp/long_logger.sh;"
        )

    def non_boot_partitions(self, volumes):
        for part in filter(lambda p: p["type"] == "partition" and
                           p["mount"] != "/boot", volumes):
            if part["size"] > 0:
                yield part

    def pcount(self, disk_id, increment=0):
        self._pcount[disk_id] = self._pcount.get(disk_id, 0) + increment
        return self._pcount.get(disk_id, 0)

    def psize(self, disk_id, increment=0):
        self._pend[disk_id] = self._pend.get(disk_id, 0) + increment
        return self._pend.get(disk_id, 0)

    def get_partition_count(self, name):
        count = 0
        for disk in self.iterdisks():
            count += len([v for v in disk["volumes"]
                          if v.get(\'name\') == name and v[\'size\'] > 0])
        return count

    def num_ceph_journals(self):
        return self.get_partition_count(\'cephjournal\')

    def num_ceph_osds(self):
        return self.get_partition_count(\'ceph\')

    def erase_partition_table(self):
        for disk in self.iterdisks():
            self.early("test -e {0} && "
                       "dd if=/dev/zero of={0} "
                       "bs=1M count=10".format(self._disk_dev(disk)))
            self.early("sleep 10")
            self.early("hdparm -z {0}".format(self._disk_dev(disk)))
            self.early("parted -s {0} print free".format(self._disk_dev(disk)))

    def log_lvm(self, line, early=True):
        func = self.early
        if not early:
            func = self.late
        func("echo \"=== {0} ===\"".format(line))
        func("vgs -a --noheadings")
        func("pvs --noheadings")

    def erase_lvm_metadata(self, early=True):
        func = self.early
        if not early:
            func = self.late

        func("for v in $(vgs -a --noheadings 2>/dev/null | "
             "sed \'s/^\([ ]*\)\([^ ]\+\)\(.*\)/\\2/g\'); do "
             "vgreduce --force --removemissing $v; "
             "vgremove --force $v; done")
        func("for p in $(pvs --noheadings 2>/dev/null | "
             "sed \'s/^\([ ]*\)\([^ ]\+\)\(.*\)/\\2/g\'); do "
             "pvremove -ff -y $p; done")

    def _blacklist_udev_rules(self):
        self.late(
            "for rules in $(ls -1 /lib/udev/rules.d/*.rules); do "
            "test -e /etc/udev/rules.d/$(basename $rules) && "
            "mv /etc/udev/rules.d/$(basename $rules) "
            "/etc/udev/rules.d/$(basename $rules).bak; "
            "echo \'#\' > /etc/udev/rules.d/$(basename $rules); "
            "done")
        self.late("udevadm control --reload")

    def _unblacklist_udev_rules(self):
        self.late(
            "for rules in $(ls -1 /lib/udev/rules.d/*.rules); do "
            "if test -e /etc/udev/rules.d/$(basename $rules).bak; "
            "then mv /etc/udev/rules.d/$(basename $rules).bak "
            "/etc/udev/rules.d/$(basename $rules); "
            "else rm -f /etc/udev/rules.d/$(basename $rules); "
            "fi; done")
        self.late("udevadm control --reload")
        # NOTE(agordeev): do subsystem match, otherwise it will stuck
        self.late("udevadm trigger --subsystem-match=block")
        self.late("udevadm settle --quiet")

    def boot(self):
        self.recipe("24 24 24 ext3 "
                    "$gptonly{ } "
                    "$bios_boot{ } "
                    "method{ biosgrub } .")
        self.psize(self.os_disk, 24 * self.factor)
        self.pcount(self.os_disk, 1)

        self.late("parted -s $(readlink -f {0}) set {1} bios_grub on".format(
            self.os_disk,
            self.pcount(self.os_disk)
            )
        )

        self.recipe(
            "200 200 200 ext3 $primary{ } "
            "$gptonly{ } "
            "$bootable{ } method{ format } format{ } use_filesystem{ } "
            "filesystem{ ext3 } mountpoint{ /boot } .")
        self.pcount(self.os_disk, 1)
        self.psize(self.os_disk, 200 * self.factor)

    def os(self):
        for vg in [v for v in self.data
                   if v["type"] == "vg" and v["id"] == "os"]:
            for vol in vg["volumes"]:
                if vol["mount"] == "swap":
                    swap_size = vol["size"]
                elif vol["mount"] == "/":
                    root_size = vol["size"]

        self.recipe("{0} {0} {0} ext4 "
                    "$gptonly{{ }} "
                    "method{{ format }} format{{ }} use_filesystem{{ }} "
                    "filesystem{{ ext4 }} mountpoint{{ / }} ."
                    "".format(root_size))
        self.pcount(self.os_disk, 1)
        self.psize(self.os_disk, root_size * self.factor)
        self.recipe("{0} {0} {0} linux-swap "
                    "$gptonly{{ }} "
                    "method{{ swap }} format{{ }} .".format(swap_size))
        self.pcount(self.os_disk, 1)
        self.psize(self.os_disk, swap_size * self.factor)
        """
        We need this line because debian-installer takes total disk space
        for the last partition. So to be able to allocate custom partitions
        during the late stage we need to create fake swap partition that
        we then destroy.
        """
        self.recipe("1 1 -1 ext3 $gptonly{ } method{ keep } .")
        self.late("parted -s {0} print free".format(self.os_disk))
        self._umount_target()
        self.late("parted {0} rm 5".format(self.os_disk))
        self.late("sleep 10")
        self.late("hdparm -z {0}".format(self.os_disk))
        self.late("parted -s {0} print free".format(self.os_disk))
        self.late("find /dev \( -type l -o -type b \) -exec ls -l {} \;")
        self._mount_target()

    def partitions(self):
        ceph_osds = self.num_ceph_osds()
        journals_left = ceph_osds
        ceph_journals = self.num_ceph_journals()

        self._umount_target()
        self._blacklist_udev_rules()
        cephjournal_guid_commands = []
        for disk in self.iterdisks():
            for part in self.non_boot_partitions(disk["volumes"]):

                if self.pcount(self._disk_dev(disk)) == 0:
                    self.late("parted -s {0} mklabel gpt".format(
                        self._disk_dev(disk)), udev_settle=True)
                    self.late("parted -a optimal -s {0} "
                              "unit {3} mkpart primary {1} {2}".format(
                                  self._disk_dev(disk),
                                  self.psize(self._disk_dev(disk)),
                                  self.psize(self._disk_dev(disk),
                                             24 * self.factor),
                                  self.unit),
                              udev_settle=True)
                    self.late("parted -s {0} set {1} "
                              "bios_grub on".format(
                                  self._disk_dev(disk),
                                  self.pcount(self._disk_dev(disk), 1)),
                              udev_settle=True)
                    self.late("parted -s {0} print free".format(
                        self._disk_dev(disk)))
                if part.get(\'name\') == \'cephjournal\':
                    # We need to allocate a journal partition for each ceph OSD
                    # Determine the number of journal partitions we need on
                    # each device
                    ratio = math.ceil(float(ceph_osds) / ceph_journals)

                    # No more than 10GB will be allocated to a single
                    # journal partition
                    size = part["size"] / ratio
                    if size > 10240:
                        size = 10240

                    # This will attempt to evenly spread partitions across
                    # multiple devices e.g. 5 osds with 2 journal devices will
                    # create 3 partitions on the first device and 2 on the
                    # second
                    if ratio < journals_left:
                        end = ratio
                    else:
                        end = journals_left

                    for i in range(0, end):
                        journals_left -= 1
                        pcount = self.pcount(self._disk_dev(disk), 1)
                        part["pcount"] = pcount
                        self.late(
                            "parted -a optimal -s {0} "
                            "unit {4} mkpart {1} {2} {3}".format(
                                self._disk_dev(disk),
                                self._parttype(pcount),
                                self.psize(self._disk_dev(disk)),
                                self.psize(self._disk_dev(disk),
                                           size * self.factor),
                                self.unit),
                            udev_settle=True
                        )
                        # We don\'t want to append late command right here
                        # because we need sgdisk to be run in-target so
                        # the target must be mounted. Instead of additional
                        # mounting and unmounting we just collect all those
                        # commands and them run them all at once.
                        cephjournal_guid_commands.append(
                            "sgdisk --typecode={0}:{1} {2}".format(
                                pcount,
                                part["partition_guid"],
                                self._disk_dev(disk)
                            )
                        )
                        self.late("parted -s {0} print free".format(
                            self._disk_dev(disk)))
                    continue

                pcount = self.pcount(self._disk_dev(disk), 1)
                part["pcount"] = pcount
                tabmount = part["mount"] if part["mount"] != "swap" else "none"
                self.late("parted -a optimal -s {0} "
                          "unit {4} mkpart {1} {2} {3}".format(
                              self._disk_dev(disk),
                              self._parttype(pcount),
                              self.psize(self._disk_dev(disk)),
                              self.psize(self._disk_dev(disk),
                                         part["size"] * self.factor),
                              self.unit),
                          udev_settle=True)
                self.late("sleep 10")
                self.late("hdparm -z {0}"
                          "".format(self._disk_dev(disk)))
                self.late("parted -s {0} print free".format(
                    self._disk_dev(disk)))
                self.late(
                    "find /dev \( -type l -o -type b \) -exec ls -l {} \;")
                self.late("mount")
                self.late("cat /proc/swaps")
                self.late("cat /proc/mdstat")
                self.late("cat /proc/partitions")

                # clear any fs info that may remain on newly created partition
                self.late("dd if=/dev/zero of={0}{1}{2} bs=1M count=10"
                          "".format(self._disk_dev(disk),
                                    self._pseparator(disk[\'name\']),
                                    pcount))

                fs = part.get("file_system", "xfs")
                if fs not in ("swap", None, "none"):
                    disk_label = self._getlabel(part.get("disk_label"))
                    self.late("mkfs.{0} {1} {2}{3}{4} {5}".format(
                        part.get("file_system", "xfs"),
                        self._fsoptions(part.get("file_system", "xfs")),
                        self._disk_dev(disk),
                        self._pseparator(disk[\'name\']),
                        pcount, disk_label))
        self._unblacklist_udev_rules()
        self._mount_target()

        # Partition guids must be set in-target, which requires target to be
        # mounted. But for cephjournal we have a separate collection of
        # late commands.
        for disk in self.iterdisks():
            for part in self.non_boot_partitions(disk["volumes"]):
                if (part.get("partition_guid") and
                        part.get("name") != "cephjournal"):
                    self.late("sgdisk --typecode={0}:{1} {2}"
                              "".format(part["pcount"], part["partition_guid"],
                                        self._disk_dev(disk)), True)

        # This loop appends commands which set cephjournal guids.
        for command in cephjournal_guid_commands:
            self.late(command, True)

        for disk in self.iterdisks():
            for part in filter(lambda p: p["type"] == "partition" and
                               p["mount"] != "/boot" and p["size"] > 0 and
                               p.get(\'name\') != \'cephjournal\',
                               disk["volumes"]):

                if not part["mount"] in (None, "none", "swap"):
                    self.late("mkdir -p /target{0}".format(part["mount"]))
                if not part["mount"] in (None, "none"):
                    self.late("echo \'UUID=$(blkid -s UUID -o value "
                              "{0}{1}{2}) "
                              "{3} {4} {5} 0 0\'"
                              " >> /target/etc/fstab"
                              "".format(
                                  self._disk_dev(disk),
                                  self._pseparator(disk[\'name\']),
                                  part["pcount"], tabmount,
                                  part.get("file_system", "xfs"),
                                  ("defaults" if part["mount"] != "swap"
                                   else "sw")))

    def lv(self):
        self.log_lvm("before creating lvm", False)

        devices_dict = {}
        pvlist = []

        self._umount_target()
        self._blacklist_udev_rules()
        for disk in self.iterdisks():
            self.late("parted -s {0} print free".format(self._disk_dev(disk)))
            for pv in [p for p in disk["volumes"]
                       if p["type"] == "pv" and p["vg"] != "os"]:
                if pv["size"] <= 0:
                    continue
                if self.pcount(self._disk_dev(disk)) == 0:
                    # this gonna wait until udev event queue is handled
                    self.late("parted -s {0} mklabel gpt".format(
                        self._disk_dev(disk)), udev_settle=True)
                    self.late("parted -a optimal -s {0} "
                              "unit {3} mkpart primary {1} {2}".format(
                                  self._disk_dev(disk),
                                  self.psize(self._disk_dev(disk)),
                                  self.psize(self._disk_dev(disk),
                                             24 * self.factor),
                                  self.unit),
                              udev_settle=True)
                    self.late("parted -s {0} set {1} "
                              "bios_grub on".format(
                                  self._disk_dev(disk),
                                  self.pcount(self._disk_dev(disk), 1)),
                              udev_settle=True)
                    self.late("parted -s {0} print free".format(
                        self._disk_dev(disk)))

                pcount = self.pcount(self._disk_dev(disk), 1)
                begin_size = self.psize(self._disk_dev(disk))
                end_size = self.psize(self._disk_dev(disk),
                                      pv["size"] * self.factor)

                self.late("parted -a optimal -s {0} "
                          "unit {4} mkpart {1} {2} {3}".format(
                              self._disk_dev(disk),
                              self._parttype(pcount),
                              begin_size,
                              end_size,
                              self.unit),
                          udev_settle=True)

                self.late("sleep 10")
                self.log_lvm("after creating partition", False)
                self.erase_lvm_metadata(False)
                self.late("hdparm -z {0}"
                          "".format(self._disk_dev(disk)))
                self.late("parted -s {0} print free".format(
                    self._disk_dev(disk)))
                self.late(
                    "find /dev \( -type l -o -type b \) -exec ls -l {} \;")
                self.late("mount")
                self.late("cat /proc/swaps")
                self.late("cat /proc/mdstat")
                self.late("cat /proc/partitions")
                pvlist.append("pvcreate -ff {0}{1}{2}"
                              "".format(self._disk_dev(disk),
                                        self._pseparator(disk[\'name\']),
                                        pcount))
                if not devices_dict.get(pv["vg"]):
                    devices_dict[pv["vg"]] = []
                devices_dict[pv["vg"]].append(
                    "{0}{1}{2}"
                    "".format(self._disk_dev(disk),
                              self._pseparator(disk[\'name\']), pcount)
                )
        self._unblacklist_udev_rules()

        self.log_lvm("before additional cleaning", False)
        self.erase_lvm_metadata(False)

        self.log_lvm("before pvcreate", False)
        for pvcommand in pvlist:
            self.late(pvcommand)

        self.log_lvm("before vgcreate", False)
        for vg, devs in devices_dict.iteritems():
            self.late("vgremove -f {0}".format(vg), udev_settle=True)
            self.late("vgcreate -s 32m {0} {1}".format(vg, " ".join(devs)),
                      udev_settle=True)

        self.log_lvm("after vgcreate", False)
        self._mount_target()

        for vg in [v for v in self.data
                   if v["type"] == "vg" and v["id"] != "os"]:
            for lv in vg["volumes"]:
                if lv["size"] <= 0:
                    continue
                self.late("lvcreate -L {0}m -Z n -n {1} {2}".format(
                    lv["size"], lv["name"], vg["id"]), udev_settle=True)
                self.late("sleep 10")
                self.late("lvscan")

                tabmount = lv["mount"] if lv["mount"] != "swap" else "none"
                if (
                    (lv.get("file_system", "xfs") not in
                     ("swap", None, "none"))
                        and
                    (lv["mount"] not in ("swap", "/"))
                ):
                    self.late("mkfs.{0} {1} /dev/mapper/{2}-{3}".format(
                        lv.get("file_system", "xfs"),
                        self._fsoptions(lv.get("file_system", "xfs")),
                        vg["id"].replace("-", "--"),
                        lv["name"].replace("-", "--")))
                if not lv["mount"] in (None, "none", "swap", "/"):
                    self.late("mkdir -p /target{0}".format(lv["mount"]))
                if not lv["mount"] in (None, "none", "swap", "/"):
                    self.late("echo \'/dev/mapper/{0}-{1} "
                              "{2} {3} {4} 0 0\' >> /target/etc/fstab"
                              "".format(
                                  vg["id"].replace("-", "--"),
                                  lv["name"].replace("-", "--"),
                                  tabmount,
                                  lv.get("file_system", "xfs"),
                                  ("defaults" if lv["mount"] != "swap"
                                   else "sw")))

    def eval(self):
        self.early(self.disks_map())
        self.late(self.disks_map())
        self.log_lvm("before early lvm cleaning")
        self.erase_lvm_metadata()
        self.log_lvm("after early lvm cleaning")
        self.erase_partition_table()
        self.boot()
        self.os()
        self.partitions()
        self.erase_lvm_metadata()
        self.lv()
        self.late("apt-get install -y grub-pc", True)
        self.late(
            "sed -i "
            "-e \'$a\ \' "
            "-e \'$a\#Disable the waiting "
            "for user input if the last boot failed\' "
            "-e \'$a\GRUB_RECORDFAIL_TIMEOUT=$GRUB_TIMEOUT\' /etc/default/grub",
            True)
        self.late("sed -i "
                  "-e \'s/.*GRUB_TERMINAL.*/GRUB_TERMINAL=console/g\' "
                  "-e \'s/.*GRUB_GFXMODE.*/#GRUB_GFXMODE=640x480/g\' "
                  "-e \'s/.*GRUB_CMDLINE_LINUX.*/"
                  "GRUB_CMDLINE_LINUX=\" {0} \"/g\' /etc/default/grub".format(
                      self.kernel_params),
                  True)
        self._umount_target()
        self._mount_target()
        self.late("grub-mkconfig", True)
        self.late("grub-mkdevicemap", True)
        for disk in self.iterdisks():
            self.late("grub-install {0}"
                      "".format(self._disk_dev(disk)), True)
        self.late("update-grub", True)
        self.late("find /dev \( -type l -o -type b \) -exec ls -l {} \;")

    def expose_recipe(self):
        return " \\\n".join(self.recipe())

    def expose_late(self, gzip=False):
        result = ""
        for line, in_target in self.late():
            line_to_append = "{0}{1}".format(
                ("in-target " if in_target else ""), line)
            result += ("echo \'{0}\' | /tmp/long_logger.sh;\\\n"
                       "".format(re.sub("\'", "\'\"\'\"\'", line_to_append)))
            result += line_to_append + " 2>&1 | /tmp/long_logger.sh;\\\n"
        return result.rstrip()

    def expose_early(self):
        result = ""
        for line in self._long_logger():
            result += "{0}\\\n".format(line)
        for line in self.early():
            line_to_append = "{0}".format(line)
            result += ("echo \'{0}\' | /tmp/long_logger.sh;\\\n"
                       "".format(re.sub("\'", "\'\"\'\"\'", line_to_append)))
            result += line_to_append + " 2>&1 | /tmp/long_logger.sh;\\\n"
        return result.rstrip()

    def expose_disks(self):
        return self.os_disk


def pm(data):
    pmanager = PManager(data)
    pmanager.eval()
    return pmanager.expose()

example = """
[
    {
        "name": "sda",
        "free_space": 101772,
        "volumes": [
            {
                "type": "boot",
                "size": 300
            },
            {
                "mount": "/boot",
                "type": "raid",
                "size": 200
            },
            {
                "type": "lvm_meta_pool",
                "size": 0
            },
            {
                "size": 12352,
                "type": "pv",
                "lvm_meta_size": 64,
                "vg": "os"
            },
            {
                "size": 89548,
                "type": "pv",
                "lvm_meta_size": 64,
                "vg": "image"
            }
        ],
        "type": "disk",
        "id": "disk/by-path/pci-0000:00:06.0-scsi-0:0:0:0",
        "size": 102400
    },
    {
        "name": "sdb",
        "free_space": 101772,
        "volumes": [
            {
                "type": "boot",
                "size": 300
            },
            {
                "mount": "/boot",
                "type": "raid",
                "size": 200
            },
            {
                "type": "lvm_meta_pool",
                "size": 64
            },
            {
                "size": 0,
                "type": "pv",
                "lvm_meta_size": 0,
                "vg": "os"
            },
            {
                "size": 101836,
                "type": "pv",
                "lvm_meta_size": 64,
                "vg": "image"
            }
        ],
        "type": "disk",
        "id": "disk/by-path/pci-0000:00:06.0-scsi-0:0:1:0",
        "size": 102400
    },
    {
        "min_size": 12288,
        "type": "vg",
        "id": "os",
        "volumes": [
            {
                "mount": "/",
                "type": "lv",
                "name": "root",
                "size": 10240
            },
            {
                "mount": "swap",
                "type": "lv",
                "name": "swap",
                "size": 2048
            }
        ],
        "label": "Base System"
    },
    {
        "min_size": 5120,
        "type": "vg",
        "id": "image",
        "volumes": [
            {
                "mount": "/var/lib/glance",
                "type": "lv",
                "name": "glance",
                "size": 191256
            }
        ],
        "label": "Image Storage"
    }
]
"""

# pmanager = PreseedPManager(example)
# pmanager.eval()
# print pmanager.expose_late()


def default_volume_filter(volume):
    """Default volume filter. Always return True."""
    return True
',
  group   => 'root',
  mode    => '0644',
  owner   => 'root',
}

file { '/usr/sbin/fence_ssh' :
  group   => 'root',
  mode    => '0755',
  owner   => 'root',
  require => Class[Cobbler::Server],
  source  => 'puppet:///modules/nailgun/cobbler/fence_ssh.centos6.py',
}

file { '/var/lib/cobbler/kickstarts/centos-x86_64.ks' :
  before  => 'Cobbler_distro[centos-x86_64]',
  content => '#import json

# WHAT TO DO (install fresh system rather than upgrade)
install

# INSTALLATION SOURCE (centos repository)
#set $repo_setup = json.loads($getVar("repo_setup"))
#set $repo = $repo_setup["repos"][0]
url --url=$repo["uri"]

#if $varExists("repo_setup")
# REPOSITORIES FROM Nailgun
#set $repos = $repo_setup["repos"][1:]
#for $repo in $repos
repo --name=$repo["name"] --baseurl=$repo["uri"]
#end for
#else
# ALTERNATIVE REPOSITORIES (PRESET)

repo --name=Nailgun --baseurl=$tree

#end if

# KEYBOARD AND LANGUAGE CUSTOMIZATION
lang en_US.UTF-8
keyboard us

# WHICH TIMEZONE TO USE ON INSTALLED SYSTEM
timezone --utc Etc/UTC

# REBOOT AFTER INSTALLATION
reboot

firewall --disable
zerombr

# SET ROOT PASSWORD DEFAULT IS r00tme
rootpw --iscrypted \$6\$tCD3X7ji\$1urw6qEMDkVxOkD33b4TpQAjRiCeDZx0jmgMhDYhfB9KuGfqO9OcMaKyUxnGGWslEDQ4HxTw7vcAMP85NxQe61

# AUTHENTICATION CUSTOMIZATION
authconfig --enableshadow --passalgo=sha512

# DISABLE SELINUX ON INSTALLED SYSTEM
selinux --disabled

# INSTALL IN TEXT MODE
text

# SKIP CONFIGURING X
skipx

# Suppress "unsupported hardware" warning
unsupported_hardware

# SSH user and some unknown random password,
# we\'re going to use SSH keys anyway
sshpw --username root --iscrypted $6$tCD3X7ji$1urw6qEMDkVxOkD33k2jjklHSDG2hg2234kJHESJ3hwhsjHshSJshHSJSh333je34DHJHDr4je4AMP85NxQe61

%include /tmp/partition.ks

# COBBLER EMBEDDED SNIPPET: \'network_config\'
# CONFIGURES NETWORK INTERFACES DEPENDING ON
# COBBLER SYSTEM PARAMETERS
$SNIPPET(\'network_config\')

# PREINSTALL SECTION
# HERE ARE COMMANDS THAT WILL BE LAUNCHED BEFORE
# INSTALLATION PROCESS ITSELF
%pre

# COBBLER EMBEDDED SNIPPET: \'log_ks_pre\'
# CONFIGURES %pre LOGGING
$SNIPPET(\'log_ks_pre\')

# DOWNLOADS send2syslog.py AND LAUNCHES IT
# IN ORDER TO MONITOR LOG FILES AND SEND
# LINES FROM THOSE FILES TO SYSLOG
$SNIPPET(\'send2syslog\')

# SNIPPET: \'kickstart_ntp\'
# SYNC LOCAL TIME VIA NTP
$SNIPPET(\'kickstart_ntp\')

# COBBLER EMBEDDED SNIPPET: \'kickstart_start\'
# LAUNCHES %pre TRIGGERS IF THOSE INSTALLED
$SNIPPET(\'kickstart_start\')

# COBBLER EMBEDDED SNIPPET: \'pre_install_network_config\'
# PRECONFIGURES NETWORK INTERFACES DEPENDING ON
# COBBLER SYSTEM PARAMETERS
# IN PARTICULAR IT WRITES KICKSTART NETWORK CONFIGURATION
# INTO /tmp/pre_install_network_config WHICH IS INCLUDED
# INTO KICKSTART BY \'network_config\' SNIPPET
$SNIPPET(\'pre_install_network_config\')

# CONFIGURES SSH KEY ACCESS FOR SSHD CONSOLE
# DURING OPERATING SYSTEM INSTALLATION
$SNIPPET(\'anaconda_ssh_console\')

# COBBLER EMBEDDED SNIPPET: \'pre_install_partition\'
# DETECTS HARD DRIVES AND SETS FIRST OF THEM
# AS INSTALLATION TARGET AND BOOTLOADER INSTALLATION TARGET
$SNIPPET(\'pre_install_partition_lvm\')

# CONFIGURE ANACONDA YUM SETTINGS
$SNIPPET(\'anaconda-yum\')

# PACKAGES SECTION
# HERE ARE LIST OF PACKAGES THAT WILL BE INSTALLED
# FIXME --ignoremissing
%packages --nobase --ignoremissing
$SNIPPET(\'centos_pkg_kernel_lt_if_enabled\')
@Core
authconfig
bfa-firmware
bind-utils
cronie
crontabs
curl
daemonize
gcc
gdisk
make
mlocate
nailgun-agent
nailgun-mcagents
nailgun-net-check
nmap-ncat
ntp
ntpdate
openssh
openssh-clients
openssh-server
perl
ql2100-firmware
ql2200-firmware
ql23xx-firmware
ql2400-firmware
ql2500-firmware
rhn-setup
rsync
ruby-augeas
ruby-devel
rubygem-openstack
rubygem-netaddr
system-config-firewall-base
tcpdump
telnet
virt-what
vim
wget
xfsprogs
yum
yum-utils
yum-plugin-priorities

# COBBLER EMBEDDED SNIPPET: \'centos_ofed_prereq_pkgs_if_enabled\'
# LISTS ofed prereq PACKAGES IF mlnx_plugin_mode VARIABLE IS SET TO enabled
$SNIPPET(\'centos_ofed_prereq_pkgs_if_enabled\')

# COBBLER EMBEDDED SNIPPET: \'puppet_install_if_enabled\'
# LISTS puppet PACKAGE IF puppet_auto_setup VARIABLE IS SET TO 1
$SNIPPET(\'puppet_install_if_enabled\')

# COBBLER EMBEDDED SNIPPET: \'mcollective_install_if_enabled\'
# LISTS mcollective PACKAGE IF mco_auto_setup VARIABLE IS SET TO 1
$SNIPPET(\'mcollective_install_if_enabled\')

# POST INSTALLATION PARTITIONING
# THERE ARE SOME COMMANDS TO CREATE LARGE (>1TB) VOLUMES
# AND INSTALL GRUB BOOTLOADER TO MAKE NODES ABLE TO BOOT FROM ANY HARDDRIVE
%include /tmp/post_partition.ks

# POSTINSTALL SECTION
# HERE ARE COMMANDS THAT WILL BE LAUNCHED JUST AFTER
# INSTALLATION ITSELF COMPLETED
%post

yum-config-manager --disableplugin=fastestmirror --save &>/dev/null

echo -e "modprobe nf_conntrack_ipv4\nmodprobe nf_conntrack_ipv6" >> /etc/rc.modules
chmod +x /etc/rc.modules
echo -e "net.nf_conntrack_max=1048576" >> /etc/sysctl.conf
mkdir -p /var/log/coredump
echo -e "kernel.core_pattern=/var/log/coredump/core.%e.%p.%h.%t" >> /etc/sysctl.conf
chmod 777 /var/log/coredump
echo -e "* soft core unlimited\n* hard core unlimited" >> /etc/security/limits.conf
sed -i \'/\*.*soft.*nproc.*1024$/s/1024/10240/\' /etc/security/limits.d/90-nproc.conf

# COBBLER EMBEDDED SNIPPET: \'log_ks_post\'
# CONFIGURES %post LOGGING
$SNIPPET(\'log_ks_post\')

# COBBLER EMBEDDED SNIPPET: \'post_install_kernel_options\'
# CONFIGURES KERNEL PARAMETERS ON INSTALLED SYSTEM
$SNIPPET(\'post_install_kernel_options\')

# COBBLER EMBEDDED SNIPPET: \'post_install_network_config\'
# CONFIGURES NETWORK INTERFACES DEPENDING ON
# COBBLER SYSTEM PARAMETERS
$SNIPPET(\'post_install_network_config_fuel\')

# COBBLER EMBEDDED SNIPPET: \'puppet_conf\'
# CONFIGURES PUPPET AGENT
$SNIPPET(\'puppet_conf\')

# COBBLER EMBEDDED SNIPPET: \'puppet_register_if_enabled\'
# CREATES CERTIFICATE REQUEST AND SENDS IT TO PUPPET MASTER
$SNIPPET(\'puppet_register_if_enabled_fuel\')

# COBBLER EMBEDDED SNIPPET: \'mcollective_conf\'
# CONFIGURES MCOLLECTIVE AGENT
$SNIPPET(\'mcollective_conf\')

# SNIPPET: \'kickstart_ntp\'
# SYNC LOCAL TIME VIA NTP
$SNIPPET(\'kickstart_ntp\')

# SNIPPET: \'ntp_to_masternode\'
# CONFIGURES NTPD POOL TO MASTER NODE
$SNIPPET(\'ntp_to_masternode\')

# Let\'s not to use separate snippet for just one line of code. Complexity eats my time.
echo \'flock -w 0 -o /var/lock/agent.lock -c "/opt/nailgun/bin/agent >> /var/log/nailgun-agent.log 2>&1"\' >> /etc/rc.local

# It is for the internal nailgun using
echo target > /etc/nailgun_systemtype

# COBBLER EMBEDDED SNIPPET: \'authorized_keys\'
# PUTS authorized_keys file into /root/.ssh/authorized_keys
$SNIPPET(\'centos_authorized_keys\')

# COBBLER EMBEDDED SNIPPET: \'nailgun_repo\'
# REMOVES ALL *.repo FILES FROM /etc/yum.repos.d AND
# CREATES /etc/yum.repos.d/nailgun.repo FILE AND
# PUTS IN IT ALL THE REPOSITORIES DEFINED IN ks_repo VARIABLE
$SNIPPET(\'nailgun_repo\')

sleep_time="1"
retry_count="10"

#raw
yum_retry() {
  retry="1"
  while :; do
    yum ${@}
    if [ "${?}" -eq "0" ]; then
      break
    fi
    retry=$((retry + 1))
    if [ "${retry}" -gt "${retry_count}" ]; then
      echo "Command failed: yum ${@}"
      break
    fi
    sleep "${sleep_time}"
  done
}
#end raw

rpm -e --nodeps ruby
yum_retry install --exclude=ruby21*,ruby-2.1.1* -y ruby rubygems
yum_retry update -y --exclude --exclude=ruby*

mkdir -p /etc/nailgun-agent/
cat > /etc/nailgun-agent/config.yaml << EOA
---
url: \'http://10.109.0.2:8000/api\'
EOA

# COBBLER EMBEDDED SNIPPET: \'kernel_lt_if_enabled\'
# INSTALLS kernel-lt PACKAGE IF kernel_lt VARIABLE IS SET TO 1
$SNIPPET(\'centos_post_kernel_lt_if_enabled\')

# COBBLER EMBEDDED SNIPPET: \'ssh_disable_gssapi\'
# REMOVES "GSSAPICleanupCredentials yes" AND "GSSAPIAuthentication yes" LINES
# FROM /etc/ssh/sshd_config
$SNIPPET(\'ssh_disable_gssapi\')

# Let\'s not wait forewer when ssh\'ing:
sed -i --follow-symlinks -e \'/UseDNS/d\' /etc/ssh/sshd_config
echo \'UseDNS no\' >> /etc/ssh/sshd_config

# COBBLER EMBEDDED SNIPPET: \'sshd_auth_pubkey_only\'
# DISABLE PASSWORD AUTH. ALLOW PUBKEY AUTH ONLY IN /etc/ssh/sshd_config
$SNIPPET(\'sshd_auth_pubkey_only\')

# Copying default bash settings to the root directory
cp -f /etc/skel/.bash* /root/

# Rsyslogd should send all messages to master node
$SNIPPET(\'target_logs_to_master\')

# Configure static IP address for admin interface
$SNIPPET(\'centos_static_net\')

# Blacklist i2c_piix4 module so it does not create kernel errors
$SNIPPET(\'centos_blacklist_i2c_piix4\')

# Install OFED components for RDMA if needed
$SNIPPET(\'ofed_install_with_sriov\')

# COBBLER EMBEDDED SNIPPET: \'kickstart_done\'
# DISABLES PXE BOOTING
$SNIPPET(\'kickstart_done\')

%end
',
  group   => 'root',
  mode    => '0644',
  owner   => 'root',
  require => Class[Cobbler::Server],
}

file { '/var/lib/cobbler/kickstarts/ubuntu-amd64.preseed' :
  before  => 'Cobbler_distro[ubuntu_1404_x86_64]',
  content => 'd-i debian-installer/locale string en_US.UTF-8

d-i debian-installer/splash boolean false

d-i console-setup/ask_detect        boolean false
d-i console-setup/layoutcode        string us
d-i console-setup/variantcode       string

# !!!! do not use netcfg/enable option because netcfg segfaults
# d-i netcfg/enable boolean false
d-i netcfg/choose_interface select auto

# by default we use dhcp but it is possible to set network
# configuration via kernel parameters
d-i netcfg/dhcp_timeout string 30
d-i netcfg/dhcp_failed note
d-i netcfg/dhcp_options select Configure network manually

# these lines must be added via system kopts
# d-i netcfg/get_hostname string nailgun
# d-i netcfg/get_domain string example.com

d-i hw-detect/load_firmware boolean true

d-i clock-setup/utc boolean true
d-i clock-setup/ntp boolean false
d-i time/zone string Etc/UTC

$SNIPPET(\'ubuntu_network_console_and_syslog\')
$SNIPPET(\'ubuntu_partition\')

#set fuel_version=$getVar(\'fuel_version\', \'\')
#if $fuel_version >= \'6.0\'
d-i base-installer/kernel/image string linux-image-generic-lts-trusty
#else
d-i base-installer/kernel/image string linux-image-3.11
#end if


##########
# REPOS
##########

#import json
#set $repo_setup = json.loads($getVar("repo_setup"))
#set $repos = $repo_setup["repos"]
#set $base_mirror = $repos[0]
#set $base_mirror_protocol = $base_mirror["uri"].split(":", 1)[0]
#set $base_mirror_host = $base_mirror["uri"].split("http://")[1].split("/")[0]
#set $base_mirror_directory = "/" + $base_mirror["uri"].split("http://")[1].split("/", 1)[1]
#set $base_mirror_suite = $base_mirror["suite"]
#set $base_mirror_components = ", ".join($base_mirror["section"].split())
d-i mirror/protocol string $base_mirror_protocol
d-i mirror/country string manual
d-i mirror/http/hostname string $base_mirror_host
d-i mirror/http/directory string $base_mirror_directory
d-i mirror/http/proxy string
d-i mirror/suite string $base_mirror_suite
# Suite to use for loading installer components (optional).
d-i mirror/udeb/suite string $base_mirror_suite
# Components to use for loading installer components (optional).
d-i mirror/udeb/components multiselect $base_mirror_components
# Retry failed repo
d-i apt-setup/mirror/error select Retry

# Use network mirror
d-i apt-setup/use_mirror boolean true

# Select architecture to amd64. That\'s very important to dpkg, since
# by default we have both amd64 and i386.
d-i apt-setup/multiarch string amd64

# You can choose to install restricted and universe software, or to install
# software from the backports repository.
d-i apt-setup/restricted boolean false
d-i apt-setup/universe boolean false
d-i apt-setup/backports boolean false

# Select which update services to use; define the mirrors to be used.
# Values shown below are the normal defaults.
# d-i apt-setup/services-select multiselect
d-i apt-setup/security_host string 127.0.0.1
# d-i apt-setup/security_path string /ubuntu

d-i debian-installer/allow_unauthenticated boolean true

d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/layoutcode string us
d-i keyboard-configuration/modelcode string SKIP

# NOTE(kozhukalov): We avoid defining multiple mirrors
# using apt-setup/localN debconf variables.
# The reason for this is that it does not suport pinning.
# We define multiple repos with their priorities inside target
# and then use in-target apt-get to install additional packages.
# See ubuntu_repos_late and ubuntu_packages_late snippets.

##########
# USERS
##########

# Allow root login
d-i passwd/root-login boolean true
d-i passwd/root-password-crypted password \$6\$tCD3X7ji\$1urw6qEMDkVxOkD33b4TpQAjRiCeDZx0jmgMhDYhfB9KuGfqO9OcMaKyUxnGGWslEDQ4HxTw7vcAMP85NxQe61

d-i passwd/make-user boolean false

############
# PACKAGES
############

tasksel tasksel/first multiselect standard
debconf debconf/frontend select Noninteractive

# NOTE(kozhukalov): We deliberately avoid using
# pkgsel/include mechanism for installing additional packages.
# We need preferences for our additional mirrors
# and it is only possible if we put preferences into target and
# install packages using apt-get inside this target directory.
# See ubuntu_repos_late and ubuntu_packages_late snippets.

d-i pkgsel/language-packs multiselect en
d-i pkgsel/update-policy select none
d-i pkgsel/upgrade select none
d-i pkgsel/updatedb boolean true

d-i finish-install/keep-consoles    boolean false
d-i finish-install/reboot_in_progress       note

d-i cdrom-detect/eject boolean true

d-i debian-installer/exit/halt boolean false
d-i debian-installer/exit/poweroff boolean false


################
# LATE COMMANDS
################
# TODO:
# add puppet and mcollective configuration
# add network configuration
d-i preseed/late_command string true && \
$SNIPPET(\'ubuntu_repos_late\')
echo \'APT::Get::AllowUnauthenticated 1;\' > /target/etc/apt/apt.conf.d/02fuel-allow-unsigned && \
echo \'Acquire::ForceIPv4 "true";\' > /target/etc/apt/apt.conf.d/03force-ipv4 && \
in-target apt-get update; \
in-target apt-get upgrade -y; \
#if $fuel_version >= \'6.0\'
in-target apt-get -y install linux-image-generic-lts-trusty linux-headers-generic-lts-trusty; \
#else
in-target apt-get -y install linux-image-3.11 linux-headers-3.11; \
#end if
#if $fuel_version >= \'6.1\'
$SNIPPET(\'ubuntu_trusty_packages_late\')
#else
$SNIPPET(\'ubuntu_precise_packages_late\')
#end if
$SNIPPET(\'ubuntu_partition_late\')
$SNIPPET(\'ubuntu_disable_pxe\') && \
$SNIPPET(\'ubuntu_network\') && \
##FIXME Ubuntu 14.04 55netcfg-copy-config always cp /etc/network/interfaces /target/etc/network/interfaces
cp /target/etc/network/interfaces /etc/network/interfaces && \
$SNIPPET(\'cinder_create_lvm_group__ubuntu\') && \
$SNIPPET(\'ubuntu_puppet_config\') && \
$SNIPPET(\'ubuntu_mcollective_config\') && \
$SNIPPET(\'ntp_to_masternode_ubuntu\')
echo "nf_conntrack_ipv4" >> /target/etc/modules && \
echo "nf_conntrack_ipv6" >> /target/etc/modules && \
echo "net.nf_conntrack_max=1048576" >> /target/etc/sysctl.conf && \
mkdir -p /target/etc/nailgun-agent && \
#set nailgun_agent_conf = \'/target/etc/nailgun-agent/config.yaml\'
echo "---" > $nailgun_agent_conf && \
echo "url: \'http://10.109.0.2:8000/api\'" >> $nailgun_agent_conf && \
echo target > /target/etc/nailgun_systemtype && \
$SNIPPET(\'ubuntu_authorized_keys\')
sed -i -e "/^\s*GSSAPICleanupCredentials yes/d" -e "/^\s*GSSAPIAuthentication yes/d" -e "s/.*PasswordAuthentication\ .*/PasswordAuthentication\ no/g" -e "/UseDNS/d" /target/etc/ssh/sshd_config && \
echo "UseDNS no" >> /target/etc/ssh/sshd_config && \
$SNIPPET(\'ubuntu_blacklist_i2c_piix4\')
$SNIPPET(\'ubuntu_static_net\')
$SNIPPET(\'ofed_install_with_sriov\')
# Rsyslogd should send all messages to master node
$SNIPPET(\'target_logs_to_master_ubuntu\')
$SNIPPET(\'ubuntu_remove_repos_late\')
true

',
  group   => 'root',
  mode    => '0644',
  owner   => 'root',
  require => Class[Cobbler::Server],
}

file { '/var/lib/cobbler/snippets/anaconda_ssh_console' :
  content => '#set $authorized_keys = str(open("/etc/cobbler/authorized_keys", "r").read())
mkdir -p --mode=700 /root/.ssh
cat > /root/.ssh/authorized_keys2 <<EOF
$authorized_keys
EOF
chmod 600 /root/.ssh/authorized_keys2
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/anaconda_yum' :
  content => 'echo "timeout=240" >> /tmp/anaconda-yum.conf
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/centos_authorized_keys' :
  content => '#set $authorized_keys = str(open("/etc/cobbler/authorized_keys", "r").read())
mkdir -p /root/.ssh
chown root:root /root/.ssh
chmod 700 /root/.ssh
cat > /root/.ssh/authorized_keys <<EOF
$authorized_keys
$auth_key
EOF
chown root:root /root/.ssh/authorized_keys
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/centos_blacklist_i2c_piix4' :
  content => '[[ $(virt-what) = "virtualbox" ]] && echo "blacklist i2c_piix4" >> /etc/modprobe.d/blacklist-i2c_piix4.conf
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/centos_ofed_prereq_pkgs_if_enabled' :
  content => '#set mlnx_mode=$getVar(\'mlnx_plugin_mode\',\'disabled\')

#if $mlnx_mode != "disabled"
mlnx-ofed-light
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/centos_pkg_kernel_lt_if_enabled' :
  content => '#if $str($getVar(\'kernel_lt\',\'\')) == "1"
kernel-lt
kernel-lt-headers
kernel-lt-devel
linux-firmware
-kernel
-kernel-headers
-kernel-firmware
-kernel-devel
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/centos_post_kernel_lt_if_enabled' :
  content => '#if $str($getVar(\'kernel_lt\',\'\')) == "1"
rpm -e kernel-2.6.32
rpm -e kernel-devel-2.6.32
rpm -e kernel-firmware-2.6.32
rpm -e kernel-headers-2.6.32
yum_retry install -y --skip-broken kernel-lt-devel kernel-lt-headers linux-firmware
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/centos_static_net' :
  content => '#set $gw = $getVar(\'gw\', \'@@server@@\')
#!/bin/bash
DEFAULT_GW=$gw
#raw
ADMIN_MAC=$(sed \'s/\ /\n/g\' /proc/cmdline | grep choose_interface | awk -F\= \'{print $2}\')
ADMIN_IF=$(tr \' \' \'\n\' < /proc/cmdline | grep "udevrules=" | sed \'s/[,=]/\n/g\' | grep "$ADMIN_MAC" | cut -d_ -f2 | head -1)
INSTALL_IF=$(ifconfig | grep "$ADMIN_MAC" | head -1 | cut -d\' \' -f1)
NETADDR=( $(ifconfig $INSTALL_IF | grep -oP "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}") )
echo -e "# FROM COBBLER SNIPPET\nDEVICE=$ADMIN_IF\nIPADDR=${NETADDR[0]}\nNETMASK=${NETADDR[2]}\nBOOTPROTO=none\nONBOOT=yes\nUSERCTL=no\n" > /etc/sysconfig/network-scripts/ifcfg-"$ADMIN_IF"

echo GATEWAY="$DEFAULT_GW" >> /etc/sysconfig/network

cat /proc/cmdline | tr \' \' \'\n\' | grep udevrules | tr \'[:upper:]\' \'[:lower:]\' | sed -e \'s/udevrules=//g\' -e \'s/,/\n/g\' | sed -e "s/^/SUBSYSTEM==\"net\",\ ACTION==\"add\",\ DRIVERS==\"?*\",\ ATTR{address}==\"/g" -e "s/_/\",\ ATTR{type}==\"1\",\ KERNEL==\"eth*\",\ NAME=\"/g" -e "s/$/\"/g" | tee /etc/udev/rules.d/70-persistent-net.rules
# Disable net-generator to prevent accidental NIC renaming
echo \'#\' > /etc/udev/rules.d/75-persistent-net-generator.rules
#end raw
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/cinder_create_lvm_group' :
  content => '#set $vgname = $getVar("cinder_vgname", "cinder-volumes")
#set $bds = $getVar("cinder_bd_for_vg", "")
#if $bds
    #set $devs = ""
    #for $bd in $bds.split(",")
        dd  if=/dev/zero bs=8192 count=1 of=$bd
        echo ";" | sfdisk -f -q -L $bd && sfdisk -R $bd  && sleep 1 && pvcreate -ff -y ${bd}1
        #set $devs += "%s1 " % $bd
    #end for
    vgcreate $vgname $devs
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/cinder_create_lvm_group__ubuntu' :
  content => '#import late_command
in-target $late_command.late_command($SNIPPET(\'cinder_create_lvm_group\'), source_method="content") \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/disable_pxe' :
  content => 'wget "http://$http_server:$http_port/cblr/svc/op/nopxe/system/$system_name" -O /dev/null
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/kickstart_ntp' :
  content => 'ntpdate -t0.5 -p8 -ub $server
hwclock --systohc
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/mcollective_conf' :
  content => '#if $str($getVar(\'mco_auto_setup\',\'\')) == "1"
mkdir -p /etc/mcollective
cat <<EOCONF > /etc/mcollective/server.cfg
main_collective = mcollective
collectives = mcollective
libdir = /usr/libexec/mcollective
logfile = /var/log/mcollective.log
loglevel = debug
daemonize = 1
direct_addressing = 1

# Set huge value of ttl to avoid cases with unsyncronized time between nodes
# It means that ttl approximately equal to 50 days
ttl = 4294957

# Plugins
securityprovider = psk
plugin.psk = $mco_pskey

#if $str($getVar(\'mco_connector\', \'stomp\')) == "stomp"
connector = stomp
plugin.stomp.host = $mco_host
plugin.stomp.port = $mco_port
plugin.stomp.user = $mco_user
plugin.stomp.password = $mco_password
#else
connector = rabbitmq
plugin.rabbitmq.vhost = $mco_vhost
plugin.rabbitmq.pool.size = 1
plugin.rabbitmq.pool.1.host = $mco_host
plugin.rabbitmq.pool.1.port = $mco_port
plugin.rabbitmq.pool.1.user = $mco_user
plugin.rabbitmq.pool.1.password = $mco_password
plugin.rabbitmq.heartbeat_interval = 30
#end if


# Facts
factsource = yaml
plugin.yaml = /etc/mcollective/facts.yaml
EOCONF
#end if

#if $str($getVar(\'mco_enable\', \'\')) == "1"
# turn on mcollective service after reboot and set priority to 81
sed -i /etc/rc.d/init.d/mcollective -e \'s/\(# chkconfig:\s\+[-0-6]\+\) [0-9]\+ \([0-9]\+\)/\1 81 \2/\'
/sbin/chkconfig mcollective on
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/mcollective_install_if_enabled' :
  content => '#if $str($getVar(\'mco_auto_setup\',\'\')) == "1"
mcollective
#end if',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/nailgun_repo' :
  content => '#import json
rm /etc/yum.repos.d/*.repo

#set $repo_setup = json.loads($getVar("repo_setup"))
#set $repos = $repo_setup["repos"]
#for $repo in $repos
cat > /etc/yum.repos.d/${repo["name"]}.repo << EOF
[${repo["name"]}]
name=$repo["name"]
baseurl=$repo["uri"]
gpgcheck=0
#if $repo.get("priority")
priority=$repo["priority"]
#end if
EOF
#end for
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ntp_register_if_enabled' :
  content => '#if $str($getVar(\'ntp_enable\', \'\')) == "1"
## run one-time synchronization and turn ntp service on after reboot
    #if $breed == "redhat"
/etc/init.d/ntpdate start
/sbin/chkconfig ntpd on
    #elif $breed == "debian" or $breed == "ubuntu"
## we read list of ntp servers from config and sync with them untill first success
awk \'$1=="peer"||$1=="server"{ res=system("ntpdate " $2); if(res==0) exit; }\' /etc/ntp.conf
/usr/sbin/update-rc.d ntp defaults
    #end if
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ntp_to_masternode' :
  content => '# Disable panic about huge clock offset
sed -i \'/^\s*tinker panic/ d\' /etc/ntp.conf
sed -i \'1 i tinker panic 0\' /etc/ntp.conf

echo 0 > /var/lib/ntp/drift
chown ntp: /var/lib/ntp/drift

# Point installed ntpd to Master node
sed -i \'/^\s*server/ d\' /etc/ntp.conf
echo "server $server burst iburst" >> /etc/ntp.conf
sed -i \'s/SYNC_HWCLOCK\s*=\s*no/SYNC_HWCLOCK=yes/\' /etc/sysconfig/ntpdate
chkconfig ntpd on
chkconfig ntpdate on
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ntp_to_masternode_ubuntu' :
  content => 'sed -i \'/^\s*tinker panic/ d\' /target/etc/ntp.conf && \
sed -i \'1 i tinker panic 0\' /target/etc/ntp.conf && \
echo 0 > /target/var/lib/ntp/ntp.drift && \
sed -i \'/^\s*server/ d\' /target/etc/ntp.conf && \
echo "server $server burst iburst" >> /target/etc/ntp.conf && \
in-target ntpdate -t0.2 -p8 -ub $server;\
in-target hwclock --systohc;\
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ofed_install_with_sriov' :
  content => '#set $mlnx_mode=$getVar(\'mlnx_plugin_mode\',\'disabled\')
#set $iser_enabled=$getVar(\'mlnx_iser_enabled\',\'false\')

#if $mlnx_mode != "disabled" or $iser_enabled == \'true\'

#set $ofed_install_cmd="/opt/ofed/install_ofed.sh"

#if $breed == "redhat"
$ofed_install_cmd
#elif $breed == "debian" or $breed == "ubuntu"
in-target $ofed_install_cmd && \
#end if

#set $mlnx_opt = "options mlx4_core port_type_array=2,2"

#if $mlnx_mode in ("ethernet") or $iser_enabled == \'true\'
#set $vf_num = $getVar(\'mlnx_vf_num\',\'1\')
#set $mlnx_opt += " num_vfs=%s enable_64b_cqe_eqe=0 log_num_mgm_entry_size=-1" % ($vf_num)
#end if

#if $iser_enabled == \'true\'
#set $mlnx_opt += " probe_vf=1"
#end if

#set $mlnx4_core_file="/etc/modprobe.d/mlx4_core.conf"
#if $breed == "debian" or $breed == "ubuntu"
#set $mlnx4_core_file = "/target" + $mlnx4_core_file + " && \\"
#end if
#set $mlnx_option_cmd="echo -e \"%s\" > %s" % ($mlnx_opt, $mlnx4_core_file)
$mlnx_option_cmd

#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/post_install_network_config' :
  content => '# Start post_install_network_config generated code
#if $getVar("system_name","") != ""
    ## this is being provisioned by system records, not profile records
    ## so we can do the more complex stuff
    ## get the list of interface names
    #set ikeys = $interfaces.keys()
    #set osversion = $getVar("os_version","")
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.:][0-9]+")
    ## Determine if we should use the MAC address to configure the interfaces first
    ## Only physical interfaces are required to have a MAC address
    ## Also determine the number of bonding devices we have, so we can set the
    ## max-bonds option in modprobe.conf accordingly. -- jcapel
    #set $configbymac = True
    #set $numbondingdevs = 0
    #set $enableipv6 = False
    ## =============================================================================
    #for $iname in $ikeys
        ## look at the interface hash data for the specific interface
        #set $idata = $interfaces[$iname]
        ## do not configure by mac address if we don\'t have one AND it\'s not for bonding/vlans
        ## as opposed to a "real" physical interface
        #if $idata.get("mac_address", "") == "" and not $vlanpattern.match($iname) and not $idata.get("interface_type", "").lower() in ("master","bond","bridge"):
                ## we have to globally turn off the config by mac feature as we can\'t
                ## use it now
                #set $configbymac = False
        #end if
        ## count the number of bonding devices we have.
        #if $idata.get("interface_type", "").lower() in ("master","bond")
            #set $numbondingdevs += 1
        #end if
        ## enable IPv6 networking if we set an ipv6 address or turn on autoconfiguration
        #if $idata.get("ipv6_address", "") != "" or $ipv6_autoconfiguration == True
            #set $enableipv6 = True
        #end if
    #end for
    ## end looping through the interfaces to see which ones we need to configure.
    ## =============================================================================
    #set $i = 0
    ## setup bonding if we have to
    #if $numbondingdevs > 0

# we have bonded interfaces, so set max_bonds
if [ -f "/etc/modprobe.conf" ]; then
    echo "options bonding max_bonds=$numbondingdevs" >> /etc/modprobe.conf
fi
    #end if
    ## =============================================================================
    ## create a staging directory to build out our network scripts into
    ## make sure we preserve the loopback device

# create a working directory for interface scripts
mkdir /etc/sysconfig/network-scripts/cobbler
cp /etc/sysconfig/network-scripts/ifcfg-lo /etc/sysconfig/network-scripts/cobbler/
    ## =============================================================================
    ## configure the gateway if set up (this is global, not a per-interface setting)
    #if $gateway != ""

# set the gateway in the network configuration file
grep -v GATEWAY /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "GATEWAY=$gateway" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
    #end if
    ## =============================================================================
    ## Configure the system\'s primary hostname. This is also passed to anaconda, but
    ## anaconda doesn\'t seem to honour it in DHCP-setups.
    #if $hostname != ""

# set the hostname in the network configuration file
grep -v HOSTNAME /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "HOSTNAME=$hostname" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network

# Also set the hostname now, some applications require it
# (e.g.: if we\'re connecting to Puppet before a reboot).
/bin/hostname $hostname
    #end if
    #if $enableipv6 == True
grep -v NETWORKING_IPV6 /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "NETWORKING_IPV6=yes" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
        #if $ipv6_autoconfiguration != ""
grep -v IPV6_AUTOCONF /etc/sysconfig/network > /etc/sysconfig/network.cobbler
            #if $ipv6_autoconfiguration == True
echo "IPV6_AUTOCONF=yes" >> /etc/sysconfig/network.cobbler
            #else
echo "IPV6_AUTOCONF=no" >> /etc/sysconfig/network.cobbler
            #end if
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
        #end if
        #if $ipv6_default_device != ""
grep -v IPV6_DEFAULTDEV /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "IPV6_DEFAULTDEV=$ipv6_default_device" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
        #end if
    #end if
    ## =============================================================================
    ## now create the config file for each interface
    #for $iname in $ikeys

# Start configuration for $iname
        ## create lots of variables to use later
        #set $idata                = $interfaces[$iname]
        #set $mac                  = $idata.get("mac_address", "").upper()
        #set $mtu                  = $idata.get("mtu", "")
        #set $static               = $idata.get("static", "")
        #set $ip                   = $idata.get("ip_address", "")
        #set $netmask              = $idata.get("netmask", "")
        #set $static_routes        = $idata.get("static_routes", "")
        #set $iface_type           = $idata.get("interface_type", "").lower()
        #set $iface_master         = $idata.get("interface_master", "")
        #set $bonding_opts         = $idata.get("bonding_opts", "")
        #set $bridge_opts          = $idata.get("bridge_opts", "").split(" ")
        #set $ipv6_address         = $idata.get("ipv6_address", "")
        #set $ipv6_secondaries     = $idata.get("ipv6_secondaries", "")
        #set $ipv6_mtu             = $idata.get("ipv6_mtu", "")
        #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
        #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")


        #set $devfile              = "/etc/sysconfig/network-scripts/cobbler/ifcfg-" + $iname
        #set $routesfile           = "/etc/sysconfig/network-scripts/cobbler/route-" + $iname
        #set $ipv6_routesfile      = "/etc/sysconfig/network-scripts/cobbler/route6-" + $iname
        ## determine if this interface is for a VLAN
        #if $vlanpattern.match($iname)
            #set $is_vlan = "true"
        #else
            #set $is_vlan = "false"
        #end if
        ## ===================================================================
        ## Things every interface get, no matter what
        ## ===================================================================
echo "DEVICE=$iname" > $devfile
        #for $mgmt_param in $mgmt_parameters
            #set $interface_extra_param_pattern = $re.compile("interface_extra_%s_.+" % $iname)
            #if $interface_extra_param_pattern.match($mgmt_param)
                #set $interface_extra = $re.split("interface_extra_%s_" % $iname, $mgmt_param)[1]
echo "$interface_extra.upper()=$mgmt_parameters.get($mgmt_param)" >> $devfile
            #end if
        #end for
echo "ONBOOT=yes" >> $devfile
            #if $mac != "" and $iface_type not in ("master","bond","bridge")
            ## virtual interfaces don\'t get MACs
echo "HWADDR=$mac" >> $devfile
IFNAME=\$(ifconfig -a | grep -i \'$mac\' | cut -d \' \' -f 1)
            ## Rename this interface in modprobe.conf
            ## FIXME: if both interfaces startwith eth this is wrong
if [ -f "/etc/modprobe.conf" ] && [ \$IFNAME ]; then
    grep \$IFNAME /etc/modprobe.conf | sed "s/\$IFNAME/$iname/" >> /etc/modprobe.conf.cobbler
    grep -v \$IFNAME /etc/modprobe.conf >> /etc/modprobe.conf.new
    rm -f /etc/modprobe.conf
    mv /etc/modprobe.conf.new /etc/modprobe.conf
fi
            #end if
        ## ===================================================================
        ## Actions based on interface_type
        ## ===================================================================
        #if $iface_type in ("master","bond")
            ## if this is a bonded interface, configure it in modprobe.conf
            #if $osversion == "rhel4"
if [ -f "/etc/modprobe.conf" ]; then
    echo "install $iname /sbin/modprobe bonding -o $iname $bonding_opts" >> /etc/modprobe.conf.cobbler
fi
            #else
            ## Add required entry to modprobe.conf
if [ -f "/etc/modprobe.conf" ]; then
    echo "alias $iname bonding" >> /etc/modprobe.conf.cobbler
fi
            #end if
            #if $bonding_opts != ""
cat >> $devfile << EOF
BONDING_OPTS="$bonding_opts"
EOF
            #end if
        #elif $iface_type in ("slave","bond_slave") and $iface_master != ""
echo "TYPE=Ethernet" >> $devfile
echo "SLAVE=yes" >> $devfile
echo "MASTER=$iface_master" >> $devfile
echo "HOTPLUG=no" >> $devfile
        #elif $iface_type == "bridge"
echo "TYPE=Bridge" >> $devfile
        #for $bridge_opt in $bridge_opts
            #if $bridge_opt.strip() != ""
echo "$bridge_opt" >> $devfile
            #end if
        #end for
        #elif $iface_type == "bridge_slave" and $iface_master != ""
echo "TYPE=Ethernet" >> $devfile
echo "BRIDGE=$iface_master" >> $devfile
echo "HOTPLUG=no" >> $devfile
        #else
echo "TYPE=Ethernet" >> $devfile
        #end if
        ## ===================================================================
        ## Actions based on static/dynamic configuration
        ## ===================================================================
        #if $static
            #if $mac == "" and $iface_type == ""
# WARNING! Configuring interfaces by their names only
#          is error-prone, and can cause issues if and when
#          the kernel gives an interface a different name
#          following a reboot/hardware changes.
            #end if
            #if $ip != "" and $iface_type not in ("slave","bond_slave","bridge_slave")
                ## Only configure static networking if an IP-address is configured
                ## and if the interface isn\'t slaved to another interface (bridging or bonding)
echo "BOOTPROTO=static" >> $devfile
echo "IPADDR=$ip" >> $devfile
                #if $netmask == ""
                    ## Default to 255.255.255.0?
                    #set $netmask = "255.255.255.0"
                #end if
echo "NETMASK=$netmask" >> $devfile
            #else
                ## Leave the interface unconfigured
                ## we don\'t have enough info for static configuration
echo "BOOTPROTO=none" >> $devfile
            #end if
            #if $enableipv6 == True and $ipv6_autoconfiguration == False
                #if $ipv6_address != ""
echo "IPV6INIT=yes" >> $devfile
echo "IPV6ADDR=$ipv6_address" >> $devfile
                #end if
                #if $ipv6_secondaries != ""
                    #set ipv6_secondaries = \' \'.join(ipv6_secondaries)
                    ## The quotes around the ipv6 ip\'s need to be here
echo "IPV6ADDR_SECONDARIES=\"$ipv6_secondaries\"" >> $devfile
                #end if
                #if $ipv6_mtu != ""
echo "IPV6MTU=$ipv6_mtu" >> $devfile
                #end if
                #if $ipv6_default_gateway != ""
echo "IPV6_DEFAULTGW=$ipv6_default_gateway" >> $devfile
                #end if
            #end if
        #else
            ## this is a DHCP interface, much less work to do
echo "BOOTPROTO=dhcp" >> $devfile
	#end if
        ## ===================================================================
        ## VLAN configuration
        ## ===================================================================
        #if $is_vlan == "true"
echo "VLAN=yes" >> $devfile
echo "ONPARENT=yes" >> $devfile
        #end if
        ## ===================================================================
        ## Optional configuration stuff
        ## ===================================================================
        #if $mtu != ""
echo "MTU=$mtu" >> $devfile
        #end if
        ## ===================================================================
        ## Non-slave DNS configuration, when applicable
        ## ===================================================================
        ## If the interface is anything but a slave then add DNSn entry
	#if $iface_type.lower() not in ("slave","bond_slave","bridge_slave")
            #set $nct = 0
            #for $nameserver in $name_servers
                #set $nct = $nct + 1
echo "DNS$nct=$nameserver" >> $devfile
            #end for
        #end if
        ## ===================================================================
        ## Interface route configuration
        ## ===================================================================
        #for $route in $static_routes
            #set routepattern = $re.compile("[0-9/.]+:[0-9.]+")
            #if $routepattern.match($route)
                #set $routebits = $route.split(":")
                #set [$network, $router] = $route.split(":")
echo "$network via $router" >> $routesfile
            #else
# Warning: invalid route "$route"
            #end if
        #end for
        #if $enableipv6 == True
            #for $route in $ipv6_static_routes
                #set routepattern = $re.compile("[0-9a-fA-F:/]+,[0-9a-fA-F:]+")
                #if $routepattern.match($route)
                    #set $routebits = $route.split(",")
                    #set [$network, $router] = $route.split(",")
echo "$network via $router dev $iname" >> $ipv6_routesfile
                #else
# Warning: invalid ipv6 route "$route"
                #end if
            #end for
        #end if
        ## ===================================================================
        ## Done with this interface
        ## ===================================================================
        #set $i = $i + 1
# End configuration for $iname
    #end for
    ## =============================================================================
    ## Configure name server search path in /etc/resolv.conf
    #set $num_ns = $len($name_servers)
    #set $num_ns_search = $len($name_servers_search)
    #if $num_ns_search > 0

sed -i -e "/^search /d" /etc/resolv.conf
echo -n "search " >>/etc/resolv.conf
        #for $nameserversearch in $name_servers_search
echo -n "$nameserversearch " >>/etc/resolv.conf
        #end for
echo "" >>/etc/resolv.conf
    #else
sed -i -e "/^search /d" /etc/resolv.conf
sed -i -e "/^domain /d" /etc/resolv.conf
    #end if
    ## =============================================================================
    ## Configure name servers in /etc/resolv.conf
    #if $num_ns > 0

sed -i -e "/^nameserver /d" /etc/resolv.conf
        #for $nameserver in $name_servers
echo "nameserver $nameserver" >>/etc/resolv.conf
        #end for
    #end if

## Disable all eth interfaces by default before overwriting
## the old files with the new ones in the working directory
## This stops unneccesary (and time consuming) DHCP queries
## during the network initialization
sed -i \'s/ONBOOT=yes/ONBOOT=no/g\' /etc/sysconfig/network-scripts/ifcfg-eth*

## Move all staged files to their final location
rm -f /etc/sysconfig/network-scripts/ifcfg-*
mv /etc/sysconfig/network-scripts/cobbler/* /etc/sysconfig/network-scripts/
rm -r /etc/sysconfig/network-scripts/cobbler
if [ -f "/etc/modprobe.conf" ]; then
cat /etc/modprobe.conf.cobbler >> /etc/modprobe.conf
rm -f /etc/modprobe.conf.cobbler
fi
#end if
# End post_install_network_config generated code
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/post_install_network_config_fuel' :
  content => '# Start post_install_network_config generated code
#if $getVar("system_name","") != ""
    ## this is being provisioned by system records, not profile records
    ## so we can do the more complex stuff
    ## get the list of interface names
    #set ikeys = $interfaces.keys()
    #set osversion = $getVar("os_version","")
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.:][0-9]+")
    ## Determine if we should use the MAC address to configure the interfaces first
    ## Only physical interfaces are required to have a MAC address
    ## Also determine the number of bonding devices we have, so we can set the
    ## max-bonds option in modprobe.conf accordingly. -- jcapel
    #set $configbymac = True
    #set $numbondingdevs = 0
    #set $enableipv6 = False
    ## =============================================================================
    #for $iname in $ikeys
        ## look at the interface hash data for the specific interface
        #set $idata = $interfaces[$iname]
        ## do not configure by mac address if we don\'t have one AND it\'s not for bonding/vlans
        ## as opposed to a "real" physical interface
        #if $idata.get("mac_address", "") == "" and not $vlanpattern.match($iname) and not $idata.get("interface_type", "").lower() in ("master","bond","bridge"):
                ## we have to globally turn off the config by mac feature as we can\'t
                ## use it now
                #set $configbymac = False
        #end if
        ## count the number of bonding devices we have.
        #if $idata.get("interface_type", "").lower() in ("master","bond")
            #set $numbondingdevs += 1
        #end if
        ## enable IPv6 networking if we set an ipv6 address or turn on autoconfiguration
        #if $idata.get("ipv6_address", "") != "" or $ipv6_autoconfiguration == True
            #set $enableipv6 = True
        #end if
    #end for
    ## end looping through the interfaces to see which ones we need to configure.
    ## =============================================================================
    #set $i = 0
    ## setup bonding if we have to
    #if $numbondingdevs > 0

# we have bonded interfaces, so set max_bonds
if [ -f "/etc/modprobe.conf" ]; then
    echo "options bonding max_bonds=$numbondingdevs" >> /etc/modprobe.conf
fi
    #end if
    ## =============================================================================
    ## create a staging directory to build out our network scripts into
    ## make sure we preserve the loopback device

# create a working directory for interface scripts
mkdir /etc/sysconfig/network-scripts/cobbler
cp /etc/sysconfig/network-scripts/ifcfg-lo /etc/sysconfig/network-scripts/cobbler/
    ## =============================================================================
    ## configure the gateway if set up (this is global, not a per-interface setting)
    #if $gateway != ""

# set the gateway in the network configuration file
grep -v GATEWAY /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "GATEWAY=$gateway" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
    #end if
    ## =============================================================================
    ## Configure the system\'s primary hostname. This is also passed to anaconda, but
    ## anaconda doesn\'t seem to honour it in DHCP-setups.
    #if $hostname != ""

# set the hostname in the network configuration file
grep -v HOSTNAME /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "HOSTNAME=$hostname" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network

# Also set the hostname now, some applications require it
# (e.g.: if we\'re connecting to Puppet before a reboot).
/bin/hostname $hostname
    #end if
    #if $enableipv6 == True
grep -v NETWORKING_IPV6 /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "NETWORKING_IPV6=yes" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
        #if $ipv6_autoconfiguration != ""
grep -v IPV6_AUTOCONF /etc/sysconfig/network > /etc/sysconfig/network.cobbler
            #if $ipv6_autoconfiguration == True
echo "IPV6_AUTOCONF=yes" >> /etc/sysconfig/network.cobbler
            #else
echo "IPV6_AUTOCONF=no" >> /etc/sysconfig/network.cobbler
            #end if
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
        #end if
        #if $ipv6_default_device != ""
grep -v IPV6_DEFAULTDEV /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "IPV6_DEFAULTDEV=$ipv6_default_device" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
        #end if
    #end if
    ## =============================================================================
    ## now create the config file for each interface
    #for $iname in $ikeys

# Start configuration for $iname
        ## create lots of variables to use later
        #set $idata                = $interfaces[$iname]
        #set $mac                  = $idata.get("mac_address", "").upper()
        #set $mtu                  = $idata.get("mtu", "")
        #set $static               = $idata.get("static", "")
        #set $ip                   = $idata.get("ip_address", "")
        #set $netmask              = $idata.get("netmask", "")
        #set $static_routes        = $idata.get("static_routes", "")
        #set $iface_type           = $idata.get("interface_type", "").lower()
        #set $iface_master         = $idata.get("interface_master", "")
        #set $bonding_opts         = $idata.get("bonding_opts", "")
        #set $bridge_opts          = $idata.get("bridge_opts", "").split(" ")
        #set $ipv6_address         = $idata.get("ipv6_address", "")
        #set $ipv6_secondaries     = $idata.get("ipv6_secondaries", "")
        #set $ipv6_mtu             = $idata.get("ipv6_mtu", "")
        #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
        #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")


        #set $devfile              = "/etc/sysconfig/network-scripts/cobbler/ifcfg-" + $iname
        #set $routesfile           = "/etc/sysconfig/network-scripts/cobbler/route-" + $iname
        #set $ipv6_routesfile      = "/etc/sysconfig/network-scripts/cobbler/route6-" + $iname
        ## determine if this interface is for a VLAN
        #if $vlanpattern.match($iname)
            #set $is_vlan = "true"
        #else
            #set $is_vlan = "false"
        #end if
        ## ===================================================================
        ## Things every interface get, no matter what
        ## ===================================================================
echo "DEVICE=$iname" > $devfile
        #set $interface_extra_param_pattern = $re.compile("interface_extra_%s_.+" % $iname)
        #for $mgmt_param in $mgmt_parameters
            #if $interface_extra_param_pattern.match($mgmt_param)
                #set $interface_extra = $re.split("interface_extra_%s_" % $iname, $mgmt_param)[1]
echo "$interface_extra.upper()=$mgmt_parameters.get($mgmt_param)" >> $devfile
            #end if
        #end for
            #if $mac != "" and $iface_type not in ("master","bond","bridge")
            ## virtual interfaces don\'t get MACs
echo "HWADDR=$mac" >> $devfile
IFNAME=\$(ifconfig -a | grep -i \'$mac\' | cut -d \' \' -f 1)
            ## Rename this interface in modprobe.conf
            ## FIXME: if both interfaces startwith eth this is wrong
if [ -f "/etc/modprobe.conf" ] && [ \$IFNAME ]; then
    grep \$IFNAME /etc/modprobe.conf | sed "s/\$IFNAME/$iname/" >> /etc/modprobe.conf.cobbler
    grep -v \$IFNAME /etc/modprobe.conf >> /etc/modprobe.conf.new
    rm -f /etc/modprobe.conf
    mv /etc/modprobe.conf.new /etc/modprobe.conf
fi
            #end if
        ## ===================================================================
        ## Actions based on interface_type
        ## ===================================================================
        #if $iface_type in ("master","bond")
            ## if this is a bonded interface, configure it in modprobe.conf
            #if $osversion == "rhel4"
if [ -f "/etc/modprobe.conf" ]; then
    echo "install $iname /sbin/modprobe bonding -o $iname $bonding_opts" >> /etc/modprobe.conf.cobbler
fi
            #else
            ## Add required entry to modprobe.conf
if [ -f "/etc/modprobe.conf" ]; then
    echo "alias $iname bonding" >> /etc/modprobe.conf.cobbler
fi
            #end if
            #if $bonding_opts != ""
cat >> $devfile << EOF
BONDING_OPTS="$bonding_opts"
EOF
            #end if
        #elif $iface_type in ("slave","bond_slave") and $iface_master != ""
echo "TYPE=Ethernet" >> $devfile
echo "SLAVE=yes" >> $devfile
echo "MASTER=$iface_master" >> $devfile
echo "HOTPLUG=no" >> $devfile
        #elif $iface_type == "bridge"
echo "TYPE=Bridge" >> $devfile
        #for $bridge_opt in $bridge_opts
            #if $bridge_opt.strip() != ""
echo "$bridge_opt" >> $devfile
            #end if
        #end for
        #elif $iface_type == "bridge_slave" and $iface_master != ""
echo "TYPE=Ethernet" >> $devfile
echo "BRIDGE=$iface_master" >> $devfile
echo "HOTPLUG=no" >> $devfile
        #else
echo "TYPE=Ethernet" >> $devfile
        #end if
        ## ===================================================================
        ## Actions based on static/dynamic configuration
        ## ===================================================================
        #if $static
            #if $mac == "" and $iface_type == ""
# WARNING! Configuring interfaces by their names only
#          is error-prone, and can cause issues if and when
#          the kernel gives an interface a different name
#          following a reboot/hardware changes.
            #end if
            #if $ip != "" and $iface_type not in ("slave","bond_slave","bridge_slave")
                ## Only configure static networking if an IP-address is configured
                ## and if the interface isn\'t slaved to another interface (bridging or bonding)
echo "BOOTPROTO=static" >> $devfile
echo "IPADDR=$ip" >> $devfile
                #if $netmask == ""
                    ## Default to 255.255.255.0?
                    #set $netmask = "255.255.255.0"
                #end if
echo "NETMASK=$netmask" >> $devfile
            #else
                ## Leave the interface unconfigured
                ## we don\'t have enough info for static configuration
echo "BOOTPROTO=none" >> $devfile
            #end if
            #if $enableipv6 == True and $ipv6_autoconfiguration == False
                #if $ipv6_address != ""
echo "IPV6INIT=yes" >> $devfile
echo "IPV6ADDR=$ipv6_address" >> $devfile
                #end if
                #if $ipv6_secondaries != ""
                    #set ipv6_secondaries = \' \'.join(ipv6_secondaries)
                    ## The quotes around the ipv6 ip\'s need to be here
echo "IPV6ADDR_SECONDARIES=\"$ipv6_secondaries\"" >> $devfile
                #end if
                #if $ipv6_mtu != ""
echo "IPV6MTU=$ipv6_mtu" >> $devfile
                #end if
                #if $ipv6_default_gateway != ""
echo "IPV6_DEFAULTGW=$ipv6_default_gateway" >> $devfile
                #end if
            #end if
        #else
            ## this is an unassigned interface, much less work to do
echo "BOOTPROTO=none" >> $devfile
	#end if
        ## ===================================================================
        ## VLAN configuration
        ## ===================================================================
        #if $is_vlan == "true"
echo "VLAN=yes" >> $devfile
echo "ONPARENT=yes" >> $devfile
        #end if
        ## ===================================================================
        ## Optional configuration stuff
        ## ===================================================================
        #if $mtu != ""
echo "MTU=$mtu" >> $devfile
        #end if
        ## ===================================================================
        ## Non-slave DNS configuration, when applicable
        ## ===================================================================
        ## If the interface is anything but a slave then add DNSn entry
	#if $iface_type.lower() not in ("slave","bond_slave","bridge_slave")
            #set $nct = 0
            #for $nameserver in $name_servers
                #set $nct = $nct + 1
echo "DNS$nct=$nameserver" >> $devfile
            #end for
        #end if
        ## ===================================================================
        ## Interface route configuration
        ## ===================================================================
        #for $route in $static_routes
            #set routepattern = $re.compile("[0-9/.]+:[0-9.]+")
            #if $routepattern.match($route)
                #set $routebits = $route.split(":")
                #set [$network, $router] = $route.split(":")
echo "$network via $router" >> $routesfile
            #else
# Warning: invalid route "$route"
            #end if
        #end for
        #if $enableipv6 == True
            #for $route in $ipv6_static_routes
                #set routepattern = $re.compile("[0-9a-fA-F:/]+,[0-9a-fA-F:]+")
                #if $routepattern.match($route)
                    #set $routebits = $route.split(",")
                    #set [$network, $router] = $route.split(",")
echo "$network via $router dev $iname" >> $ipv6_routesfile
                #else
# Warning: invalid ipv6 route "$route"
                #end if
            #end for
        #end if
        ## ===================================================================
        ## Done with this interface
        ## ===================================================================
        #set $i = $i + 1
# End configuration for $iname
    #end for
    ## =============================================================================
    ## Configure name server search path in /etc/resolv.conf
    #set $num_ns = $len($name_servers)
    #set $num_ns_search = $len($name_servers_search)
    #if $num_ns_search > 0

sed -i -e "/^search /d" /etc/resolv.conf
echo -n "search " >>/etc/resolv.conf
        #for $nameserversearch in $name_servers_search
echo -n "$nameserversearch " >>/etc/resolv.conf
        #end for
echo "" >>/etc/resolv.conf
    #end if
    ## =============================================================================
    ## Configure name servers in /etc/resolv.conf
    #if $num_ns > 0

sed -i -e "/^nameserver /d" /etc/resolv.conf
        #for $nameserver in $name_servers
echo "nameserver $nameserver" >>/etc/resolv.conf
        #end for
    #end if

## Disable all eth interfaces by default before overwriting
## the old files with the new ones in the working directory
## This stops unneccesary (and time consuming) DHCP queries
## during the network initialization
sed -i \'s/ONBOOT=yes/ONBOOT=no/g\' /etc/sysconfig/network-scripts/ifcfg-eth*

## Move all staged files to their final location
rm -f /etc/sysconfig/network-scripts/ifcfg-*
mv /etc/sysconfig/network-scripts/cobbler/* /etc/sysconfig/network-scripts/
rm -r /etc/sysconfig/network-scripts/cobbler
if [ -f "/etc/modprobe.conf" ]; then
cat /etc/modprobe.conf.cobbler >> /etc/modprobe.conf
rm -f /etc/modprobe.conf.cobbler
fi
#end if
# End post_install_network_config generated code
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/post_part_compute' :
  content => '/sbin/sfdisk -l;
dd if=/dev/zero of=/dev/sdb bs=512 count=1;
echo ";" | /sbin/sfdisk /dev/sdb;
sfdisk -R /dev/sdb;
sleep 10;
mkfs.ext4 /dev/sdb1;
sdb1_uuid=$(blkid -ovalue /dev/sdb1 | head -1);
echo "UUID=$sdb1_uuid /instances ext4 defaults,noatime,nodiratime 0 0" >> /etc/fstab;
mkdir /instances;
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/post_part_controller' :
  content => '/sbin/sfdisk -l
dd if=/dev/zero of=/dev/sdb bs=512 count=1
echo "0 300000 83" | /sbin/sfdisk -uM /dev/sdb
echo "300008 40000 83" | /sbin/sfdisk -N2 -uM /dev/sdb
sfdisk -R /dev/sdb
sleep 10
mkfs.ext4 /dev/sdb1
mkfs.ext4 /dev/sdb2
sdb1_uuid=$(blkid -ovalue /dev/sdb1 | head -1)
echo "UUID=$sdb1_uuid /var/lib/postgresql ext4 defaults,noatime,nodiratime 0 0" >> /etc/fstab
mkdir /var/lib/mysql
sdb2_uuid=$(blkid -ovalue /dev/sdb2 | head -1)
echo "UUID=$sdb2_uuid /var/lib/rabbitmq ext4 defaults,noatime,nodiratime 0 0" >> /etc/fstab
mkdir /var/lib/rabbitmq
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/post_part_storage' :
  content => 'dd if=/dev/zero of=/dev/sdd bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdd
sdd_uuid_old=$(blkid -ovalue /dev/sdd | head -1)
sfdisk -R /dev/sdd
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdd1
sdd_uuid_new=$(blkid -ovalue /dev/sdd1 | head -1)
echo "UUID=$sdd_uuid /srv/node/sdd1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdd1
xfs_check /dev/sdd1
dd if=/dev/zero of=/dev/sde bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sde
sde_uuid_old=$(blkid -ovalue /dev/sde | head -1)
sfdisk -R /dev/sde
sleep 10
mkfs.xfs -i size=1024 -f /dev/sde1
sde_uuid_new=$(blkid -ovalue /dev/sde1 | head -1)
echo "UUID=$sde_uuid /srv/node/sde1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sde1
xfs_check /dev/sde1
dd if=/dev/zero of=/dev/sdf bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdf
sdf_uuid_old=$(blkid -ovalue /dev/sdf | head -1)
sfdisk -R /dev/sdf
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdf1
sdf_uuid_new=$(blkid -ovalue /dev/sdf1 | head -1)
echo "UUID=$sdf_uuid /srv/node/sdf1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdf1
xfs_check /dev/sdf1
dd if=/dev/zero of=/dev/sdg bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdg
sdg_uuid_old=$(blkid -ovalue /dev/sdg | head -1)
sfdisk -R /dev/sdg
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdg1
sdg_uuid_new=$(blkid -ovalue /dev/sdg1 | head -1)
echo "UUID=$sdg_uuid /srv/node/sdg1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdg1
xfs_check /dev/sdg1
dd if=/dev/zero of=/dev/sdh bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdh
sdh_uuid_old=$(blkid -ovalue /dev/sdh | head -1)
sfdisk -R /dev/sdh
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdh1
sdh_uuid_new=$(blkid -ovalue /dev/sdh1 | head -1)
echo "UUID=$sdh_uuid /srv/node/sdh1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdh1
xfs_check /dev/sdh1
dd if=/dev/zero of=/dev/sdi bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdi
sdi_uuid_old=$(blkid -ovalue /dev/sdi | head -1)
sfdisk -R /dev/sdi
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdi1
sdi_uuid_new=$(blkid -ovalue /dev/sdi1 | head -1)
echo "UUID=$sdi_uuid /srv/node/sdi1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdi1
xfs_check /dev/sdi1
dd if=/dev/zero of=/dev/sdj bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdj
sdj_uuid_old=$(blkid -ovalue /dev/sdj | head -1)
sfdisk -R /dev/sdj
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdj1
sdj_uuid_new=$(blkid -ovalue /dev/sdj1 | head -1)
echo "UUID=$sdj_uuid /srv/node/sdj1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdj1
xfs_check /dev/sdj1
dd if=/dev/zero of=/dev/sdk bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdk
sdk_uuid_old=$(blkid -ovalue /dev/sdk | head -1)
sfdisk -R /dev/sdk
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdk1
sdk_uuid_new=$(blkid -ovalue /dev/sdk1 | head -1)
echo "UUID=$sdk_uuid /srv/node/sdk1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdk1
xfs_check /dev/sdk1
dd if=/dev/zero of=/dev/sdl bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdl
sdl_uuid_old=$(blkid -ovalue /dev/sdl | head -1)
sfdisk -R /dev/sdl
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdl1
sdl_uuid_new=$(blkid -ovalue /dev/sdl1 | head -1)
echo "UUID=$sdl_uuid /srv/node/sdl1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdl1
xfs_check /dev/sdl1
dd if=/dev/zero of=/dev/sdm bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdm
sdm_uuid_old=$(blkid -ovalue /dev/sdm | head -1)
sfdisk -R /dev/sdm
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdm1
sdm_uuid_new=$(blkid -ovalue /dev/sdm1 | head -1)
echo "UUID=$sdm_uuid /srv/node/sdm1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdm1
xfs_check /dev/sdm1
dd if=/dev/zero of=/dev/sdn bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdn
sdn_uuid_old=$(blkid -ovalue /dev/sdn | head -1)
sfdisk -R /dev/sdn
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdn1
sdn_uuid_new=$(blkid -ovalue /dev/sdn1 | head -1)
echo "UUID=$sdn_uuid /srv/node/sdn1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdn1
xfs_check /dev/sdn1
dd if=/dev/zero of=/dev/sdo bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdo
sdo_uuid_old=$(blkid -ovalue /dev/sdo | head -1)
sfdisk -R /dev/sdo
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdo1
sdo_uuid_new=$(blkid -ovalue /dev/sdo1 | head -1)
echo "UUID=$sdo_uuid /srv/node/sdo1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdo1
xfs_check /dev/sdo1
dd if=/dev/zero of=/dev/sdp bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdp
sdp_uuid_old=$(blkid -ovalue /dev/sdp | head -1)
sfdisk -R /dev/sdp
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdp1
sdp_uuid_new=$(blkid -ovalue /dev/sdp1 | head -1)
echo "UUID=$sdp_uuid /srv/node/sdp1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdp1
xfs_check /dev/sdp1
dd if=/dev/zero of=/dev/sdq bs=512 count=1
echo ";" | /sbin/sfdisk /dev/sdq
sdq_uuid_old=$(blkid -ovalue /dev/sdq | head -1)
sfdisk -R /dev/sdq
sleep 10
mkfs.xfs -i size=1024 -f /dev/sdq1
sdq_uuid_new=$(blkid -ovalue /dev/sdq1 | head -1)
echo "UUID=$sdq_uuid /srv/node/sdq1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" >> /etc/fstab
mkdir -p /srv/node/sdq1
xfs_check /dev/sdq1
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/pre_install_network_config' :
  content => '#if $getVar("system_name","") != ""
# Start pre_install_network_config generated code
    #set ikeys = $interfaces.keys()
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.:][0-9]+")
    #set $routepattern = $re.compile("[0-9/.]+:[0-9.]+")
    ##
    ## Determine if we should use the MAC address to configure the interfaces first
    ## Only physical interfaces are required to have a MAC address
    #set $configbymac = True
    #for $iname in $ikeys
        #set $idata = $interfaces[$iname]
        #if $idata["mac_address"] == "" and not $vlanpattern.match($iname) and not $idata["interface_type"].lower() in ("master","bond","bridge")
            #set $configbymac = False
        #end if
    #end for
    #set $i = 0

    #if $configbymac
        ## Output diagnostic message
# Start of code to match cobbler system interfaces to physical interfaces by their mac addresses
    #end if
    #for $iname in $ikeys
#  Start $iname
        #set $idata         = $interfaces[$iname]
        #set $mac           = $idata["mac_address"]
        #set $static        = $idata["static"]
        #set $ip            = $idata["ip_address"]
        #set $netmask       = $idata["netmask"]
        #set $iface_type    = $idata["interface_type"]
        #set $iface_master  = $idata["interface_master"]
        #set $static_routes = $idata["static_routes"]
        #set $devfile       = "/etc/sysconfig/network-scripts/ifcfg-" + $iname
        #if $vlanpattern.match($iname)
            ## If this is a VLAN interface, skip it, anaconda doesn\'t know
            ## about VLANs.
            #set $is_vlan = "true"
        #else
            #set $is_vlan = "false"
        #end if
        #if ($configbymac and $is_vlan == "false" and $iface_type.lower() not in ("slave","bond_slave","bridge_slave")) or $iface_type.lower() in ("master","bond","bridge")
            ## This is a physical interface, hand it to anaconda. Do not
            ## process slave interface here.
            #if $iface_type.lower() in ("master","bond","bridge")
                ## Find a slave for this interface
                #for $tiname in $ikeys
                    #set $tidata = $interfaces[$tiname]
                    #if $tidata["interface_type"].lower() in ("slave","bond_slave","bridge_slave") and $tidata["interface_master"].lower() == $iname
                        #set $mac = $tidata["mac_address"]
#  Found a slave for this interface: $tiname ($mac)
                        #break
                    #end if
                #end for
            #end if
            #if $static and $ip != ""
                #if $netmask == ""
                    ## Netmask not provided, default to /24.
                    #set $netmask = "255.255.255.0"
                #end if
                #set $netinfo = "--bootproto=static --ip=%s --netmask=%s" % ($ip, $netmask)
                #if $gateway != ""
	            #set $netinfo = "%s --gateway=%s" % ($netinfo, $gateway)
    	        #end if
    	        #if $len($name_servers) > 0
    	            #set $netinfo = "%s --nameserver=%s" % ($netinfo, $name_servers[0])
                #end if
            #else if not $static
                #set $netinfo = "--bootproto=dhcp"
            #else
                ## Skip this interface, it\'s set as static, but without
                ## networking info.
#  Skipping (no configuration)...
                #continue
            #end if
            #if $hostname != ""
                #set $netinfo = "%s --hostname=%s" % ($netinfo, $hostname)
            #end if
# Configuring $iname ($mac)
if ifconfig -a | grep -i $mac
then
  IFNAME=\$(ifconfig -a | grep -i \'$mac\' | cut -d " " -f 1)
  echo "network --noipv6 --device=\$IFNAME $netinfo" >> /tmp/pre_install_network_config
            #for $route in $static_routes
                #if $routepattern.match($route)
                    #set $routebits = $route.split(":")
                    #set [$network, $router] = $route.split(":")
  ip route add $network via $router dev \$IFNAME
                #else
  # Warning: invalid route "$route"
                #end if
            #end for
fi
        #else
            #if $iface_type.lower() in ("slave","bond_slave","bridge_slave")
#  Skipping (slave-interface)
            #else
#  Skipping (not a physical interface)...
            #end if
        #end if
    #end for
# End pre_install_network_config generated code
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/pre_install_partition' :
  content => '# hard drives
tgtdrive="undefined"
for drv in `ls -1 /sys/block | grep "sd\|hd\|vd\|cciss"`; do
    if (grep -q 0 /sys/block/${drv}/removable); then
        d=`echo ${drv} | sed -e \'s/!/\//\'`
        tgtdrive="${d}"
        break
    fi
done

# bootloader
echo "bootloader --location=mbr --driveorder=${tgtdrive} --append=\' biosdevname=0 crashkernel=auto\'" > /tmp/bootloader.ks

# partition
/usr/sbin/parted -s /dev/${tgtdrive} mklabel gpt
echo "partition /boot --fstype=ext4 --ondisk=${tgtdrive} --size=300 --asprimary" > /tmp/partition.ks
echo "partition / --fstype=ext4 --ondisk=${tgtdrive} --size=1 --grow --asprimary" >> /tmp/partition.ks
echo "partition swap --recommended --ondisk=${tgtdrive}" >> /tmp/partition.ks
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/pre_install_partition_lvm' :
  content => '#import pmanager
#set $pm = $pmanager.PManager($getVar("pm_data",{}))
#silent $pm.eval()
$pm.expose()
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/puppet_conf' :
  content => '#if $getVar(\'puppet_master\',\'\') != \'\'
mkdir -p /etc/puppet /var/lib/hiera
touch /var/lib/hiera/common.yaml /etc/puppet/hiera.yaml
cat <<EOCONF > /etc/puppet/puppet.conf
[main]
    # The Puppet log directory.
    # The default value is \'\\$vardir/log\'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is \'\\$vardir/run\'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is \'\\$confdir/ssl\'.
    ssldir = \\$vardir/ssl
    pluginsync = true
[agent]
    # The file in which puppetd stores a list of the classes
    # associated with the retrieved configuratiion.  Can be loaded in
    # the separate ``puppet`` executable using the ``--loadclasses``
    # option.
    # The default value is \'\\$confdir/classes.txt\'.
    classfile = \\$vardir/classes.txt

    # Where puppetd caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is \'\\$confdir/localconfig\'.
    localconfig = \\$vardir/localconfig
    server = $puppet_master
    # How long the client should wait for the configuration to be retrieved before considering it a failure.
    # It may help with \'execution expired\' issue we\'ve experienced.
    configtimeout = 600
    # Don\'t send reports after every run.
    report = false

EOCONF
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/puppet_install_if_enabled' :
  content => '#if $str($getVar(\'puppet_auto_setup\',\'\')) == "1"
puppet
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/puppet_register_if_enabled' :
  content => '#if $str($getVar(\'puppet_auto_setup\',\'\')) == "1"
## generate puppet certificates and trigger a signing request, but
## don\'t wait for signing to complete
/usr/sbin/puppet agent --test --waitforcert 0
#end if
#if $str($getVar(\'puppet_enable\', \'\')) == "1"
## turn puppet service on after reboot
    #if $breed == "redhat"
/sbin/chkconfig puppet on
    #elif $breed == "debian" or $breed == "ubuntu"
/usr/sbin/update-rc.d puppet defaults
sed -i -e "s/^START=no/START=yes/" /etc/default/puppet
    #end if
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/puppet_register_if_enabled_fuel' :
  content => '#if $str($getVar(\'puppet_enable\', \'\')) == "1"
# turn puppet service on for reboot
/sbin/chkconfig puppet on
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/send2syslog' :
  content => '#if $str($getVar(\'install_log_2_syslog\',\'\')) == "1"
wget -O /tmp/send2syslog.py "http://$server/cobbler/aux/send2syslog.py"
#if $getVar(\'hostname\', \'\') != \'\'
#set $config_hostname = \'"hostname": "%s",\' % $hostname
#end if
echo \'{$config_hostname
    "watchlist": [
        {"servers": [ {"host": "$server"} ],
            "watchfiles": [
                {"tag": "install/anaconda", "log_type": "anaconda",
                    "files": ["/tmp/anaconda.log",
                        "/mnt/sysimage/root/install.log"]},
                {"tag": "install/ks-pre", "files": ["/tmp/ks-pre.log"]},
                {"tag": "install/ks-post", "files": ["/mnt/sysimage/root/ks-post.log"]},
                {"tag": "install/syslog", "log_type": "anaconda",
                    "files": ["/tmp/syslog"]},
                {"tag": "install/storage", "log_type": "anaconda",
                    "files": ["/tmp/storage.log"]}
            ]
        }
    ]
}\' > /tmp/send2syslog.conf
python /tmp/send2syslog.py -c /tmp/send2syslog.conf
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ssh_disable_gssapi' :
  content => 'sed -i -e "/^\s*GSSAPICleanupCredentials yes/d" -e "/^\s*GSSAPIAuthentication yes/d" /etc/ssh/sshd_config
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/sshd_auth_pubkey_only' :
  content => '# Allow ssh auth PubKey only.
sed --follow-symlinks -i \'s/^\s*PubkeyAuthentication\s+no/PubkeyAuthentication yes/\' /etc/ssh/sshd_config
sed --follow-symlinks -i \'/^\s*PasswordAuthentication/d\' /etc/ssh/sshd_config
echo \'PasswordAuthentication no\' >> /etc/ssh/sshd_config
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/target_logs_to_master' :
  content => '#raw
cat >/etc/rsyslog.d/10-log2master.conf <<EOF
# Log all messages to master node
\$template LogToMaster, "<%PRI%>1 %\$NOW%T%TIMESTAMP:8:\$%Z %HOSTNAME% %APP-NAME% %PROCID% %MSGID% -%msg%\n"
#end raw
*.* @$server;LogToMaster
EOF',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/target_logs_to_master_ubuntu' :
  content => '#raw
echo \$template LogToMaster, "\"<%PRI%>1 %\$NOW%T%TIMESTAMP:8:\$%Z %HOSTNAME% %APP-NAME% %PROCID% %MSGID% -%msg%\"" >> /target/etc/rsyslog.d/10-logs2master.conf && \
#end raw
echo "*.* @$server;LogToMaster" >> /target/etc/rsyslog.d/10-logs2master.conf && \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_authorized_keys' :
  content => '#set $authorized_keys = str(open("/etc/cobbler/authorized_keys", "r").read())
#set $escaped_sys_keys = $authorized_keys.replace(\'\n\', \'\\n\')
#set $escaped_extra_keys = $getVar("auth_key","").replace(\'\n\', \'\\n\')
mkdir -p /target/root/.ssh && \
chown root:root /target/root/.ssh && \
chmod 700 /target/root/.ssh && \
echo -e "$escaped_sys_keys" > /target/root/.ssh/authorized_keys && \
#if $escaped_extra_keys
echo -e "$escaped_extra_keys" >> /target/root/.ssh/authorized_keys && \
#end if
chown root:root /target/root/.ssh/authorized_keys && \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_blacklist_i2c_piix4' :
  content => '([ $(virt-what) = "virtualbox" ] && echo "blacklist i2c_piix4" >> /target/etc/modprobe.d/blacklist-i2c_piix4.conf || :) && \
in-target update-initramfs -u -k all && \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_disable_pxe' :
  content => 'wget "http://$http_server:$http_port/cblr/svc/op/nopxe/system/$system_name" -O /dev/null',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_mcollective_config' :
  content => '#import late_command
#if $str($getVar(\'mco_auto_setup\',\'\')) == "1"
#set $mco_port = $getVar(\'mco_port\', \'61613\')
in-target mkdir -p /etc/mcollective && \
in-target $late_command.late_file("""
main_collective = mcollective
collectives = mcollective
libdir = /usr/share/mcollective/plugins
logfile = /var/log/mcollective.log
loglevel = debug
daemonize = 0
direct_addressing = 1

# Set huge value of ttl to avoid cases with unsyncronized time between nodes
# It means that ttl approximately equal to 50 days
ttl = 4294957

# Plugins
securityprovider = psk
plugin.psk = %(mco_pskey)s

connector = rabbitmq
plugin.rabbitmq.vhost = mcollective
plugin.rabbitmq.pool.size = 1
plugin.rabbitmq.pool.1.host = %(mco_host)s
plugin.rabbitmq.pool.1.port = %(mco_port)s
plugin.rabbitmq.pool.1.user = %(mco_user)s
plugin.rabbitmq.pool.1.password = %(mco_password)s
plugin.rabbitmq.heartbeat_interval = 30

# Facts
factsource = yaml
plugin.yaml = /etc/mcollective/facts.yaml
""" % {
    "mco_pskey": $mco_pskey,
    "mco_host": $mco_host,
    "mco_port": $mco_port,
    "mco_user": $mco_user,
    "mco_password": $mco_password
    }, "/etc/mcollective/server.cfg", source_method=\'content\', mode="0600");\

in-target sed -i \'s/msg_age = Time.now.utc.to_i - msgtime/msg_age = 0 #Time.now.utc.to_i - msgtime/g\' /usr/lib/ruby/1.8/mcollective/message.rb; \
#end if
#if $str($getVar(\'mco_enable\', \'\')) == "0"
in-target /usr/sbin/invoke-rc.d mcollective stop; \
in-target /usr/sbin/update-rc.d -f mcollective remove \
#else
true \
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_network' :
  content => '#import ipaddr
#import late_command
#set $script = ""
##
##
#set ikeys = $interfaces.keys()
##################################
## configuring udev rules
##################################
#set $script += "### configuring udev rules ###\n"
#set $rules_file = "/etc/udev/rules.d/70-persistent-net.rules"
#set $script += "echo > %s\n" % $rules_file
#for $iname in $ikeys
    #set $idata = $interfaces[$iname]
    #set $imac = $idata.get("mac_address", "")
    #if $imac == "":
        #continue
    #end if
    #set $script += "MATCHADDR=%s INTERFACE=%s /lib/udev/write_net_rules\n" % ($imac.lower(), $iname)
#end for
#set $script += "\n"
#######################################
## configuring /etc/network/interfaces
#######################################
#set $script += "### configuring interfaces ###\n"
#set $interfaces_file = "/etc/network/interfaces"
#set $interfaces_dir = "/etc/network/interfaces.d"
#set $script += "echo source %s/*  > %s\n" % ($interfaces_dir,$interfaces_file)
#set $script += "mkdir %s\n" % $interfaces_dir
#set $script += "echo auto lo >> %s/ifcfg-lo \n" % $interfaces_dir
#set $script += "echo iface lo inet loopback >> %s/ifcfg-lo\n" % $interfaces_dir
#set $script += "echo >> %s/ifcfg-lo\n" % $interfaces_dir
#for $iname in $ikeys
    #set $idata = $interfaces[$iname]
    #set $interface_file = "%s/ifcfg-%s" % ($interfaces_dir,$iname)
    #set $onboot = $getVar("interface_extra_%s_onboot" % ($iname),"no")
    #if  $onboot == "yes"
        #set $script += "echo auto %s >> %s\n" % ($iname, $interface_file)
    #end if
    #if $idata.get("static", "0") in ("1", True, "true")
        #set $iip = $idata.get("ip_address", "")
        #if $iip != ""
            #set $script += "echo iface %s inet static >> %s\n" % ($iname, $interface_file)
            #set $script += "echo address %s >> %s\n" % ($iip, $interface_file)
            #set $inetmask = $idata.get("netmask", "")
            #if $inetmask != ""
                #set $script += "echo netmask %s >> %s\n" % ($inetmask, $interface_file)
            #end if
        #else
            #set $script += "echo iface %s inet manual >> %s\n" % ($iname, $interface_file)
            #set $script += "echo up ip l set %s up >> %s\n" % ($iname, $interface_file)
            #set $script += "echo down ip l set %s down >> %s\n" % ($iname, $interface_file)
        #end if
        #set $nss = ""
        #for $ns in $getVar("name_servers", [])
             #set $nss += " %s" % $ns
        #end for
        #set $gateway = $getVar("gateway", "")
        #if $gateway != ""
            #if $iip !=""
              #if $inetmask != ""
                #set $network_address = ipaddr.IPv4Network("%s/%s" % ($iip, $inetmask))
              #else
                #set $network_address = ipaddr.IPv4Network("%s" % $iip)
              #end if
              #set $gateway_address = ipaddr.IPv4Address($gateway)
              #if $gateway_address in $network_address
                #set $script += "echo gateway %s >> %s\n" % ($gateway, $interface_file)
              #end if
            #end if
        #end if
    #else
        #set $script += "echo iface %s inet dhcp >> %s\n" % ($iname, $interface_file)
    #end if
    #set $script += "echo >> %s\n" % $interface_file
#end for
#set $script += "\n"
#######################################
## configuring /etc/hosts
#######################################
#set $script += "### configuring /etc/hosts ###\n"
#set $hosts_file = "/etc/hosts"
#set $script += "echo > %s\n" % $hosts_file
#set $script += "echo 127.0.0.1 localhost >> %s\n" % $hosts_file
#for $iname in $ikeys
    #set $idata = $interfaces[$iname]
    #if $idata.get("static", "0") in ("1", True, "true")
        #set $iip = $idata.get("ip_address", "")
        #if $iip != ""
            #set $idnsname = $idata.get("dns_name", "")
            #if $idnsname != ""
                #set $script += "echo %s %s >> %s\n" % ($iip, $idnsname, $hosts_file)
            #end if
        #end if
    #end if
#end for
#######################################
## configuring domain name
#######################################
#set $script += "### configuring /etc/hosts ###\n"
#set $resolvconf = "/etc/resolv.conf"
#set $resolvhead = "/etc/resolvconf/resolv.conf.d/head"
#set $num_ns_search = $len($name_servers_search)
#if $num_ns_search > 0
  #set $domdom = $name_servers_search[0]
  #set $script += "echo domain %s >> %s\n" % ($domdom,$resolvconf)
  #set $script += "echo domain %s >> %s\n" % ($domdom,$resolvhead)
#end if
#if $name_servers
  #for $nameserver in $name_servers
      #set $script += "echo nameserver %s >> %s\n" % ($nameserver, $resolvconf)
      #set $script += "echo nameserver %s >> %s\n" % ($nameserver, $resolvhead)
  #end for
#end if
in-target $late_command.late_command($script, source_method="content") \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_network_console_and_syslog' :
  content => '#import random
#import string
#set $authorized_keys = str(open("/etc/cobbler/authorized_keys", "r").read()).rstrip()
#set $random_pass = \'\'.join(random.choice(string.lowercase) for i in range(16))

d-i anna/choose_modules string network-console
d-i network-console/password password $random_pass
d-i network-console/password-again password $random_pass
d-i network-console/start select continue

d-i preseed/early_command string /bin/mkdir /.ssh ; \
/bin/echo "$authorized_keys" > /.ssh/authorized_keys ; \
/bin/sed -e "s#PasswordAuthentication yes#PasswordAuthentication no#" -i /etc/ssh/sshd_config ; \
/usr/bin/killall -s HUP sshd ; \
/usr/bin/killall -s KILL syslogd ; \
/sbin/syslogd -m 0 -O /var/log/syslog -S -R @@server@@
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_partition' :
  content => '#import pmanager
#set $pm = $pmanager.PreseedPManager($getVar("pm_data",{}))
#silent $pm.eval()

d-i partman/early_command string \
anna-install parted-udeb && \
anna-install hdparm-udeb && \
$pm.disks_map() \
debconf-set partman-auto/disk $pm.expose_disks();\
$pm.expose_early()
true

d-i partman-basicfilesystems/choose_label string gpt
d-i partman-basicfilesystems/default_label string gpt
d-i partman-partitioning/choose_label string gpt
d-i partman-partitioning/default_label string gpt
d-i partman/choose_label string gpt
d-i partman/default_label string gpt

d-i partman-iscsi/mainmenu string finish
d-i partman-md/device_remove_md boolean true
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-lvm/device_remove_lvm_span boolean true
d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman-auto/purge_lvm_from_device  boolean true
d-i partman-auto/method string regular
d-i partman-auto/choose_recipe select customrecipe
d-i partman-basicmethods/method_only boolean false
d-i partman-auto/expert_recipe string \
customrecipe :: \
$pm.expose_recipe()

d-i partman-partitioning/confirm_write_new_label boolean true

d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select Finish partitioning and write changes to disk
d-i partman/default_filesystem string ext4


##############
# BOOTLOADERS
##############

d-i grub-installer/skip boolean true
d-i lilo-installer/skip boolean true
d-i grub-installer/only_debian      boolean true
d-i grub-installer/with_other_os    boolean true
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_partition_late' :
  content => '#import pmanager
#set $pm = $pmanager.PreseedPManager($getVar("pm_data",{}))
#silent $pm.eval()
$pm.expose_late()
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_precise_packages_late' :
  content => '#set $ubuntu_packages = ["acl", "openssh-server", "debconf-utils", "ntp", "ntpdate", "ruby-ipaddress", "ruby-netaddr", "ruby-openstack", "libaugeas-ruby", "libstomp-ruby1.8", "libshadow-ruby1.8", "libjson-ruby1.8", "vim", "vlan", "curl", "anacron", "python-amqp", "nailgun-agent", "nailgun-mcagents", "lvm2", "nailgun-net-check", "puppet", "telnet", "gdisk", "daemonize", "rsync", "virt-what", "xfsprogs" ]
#if $str($getVar(\'mco_auto_setup\',\'\')) == "1"
    #silent $ubuntu_packages.append("ruby-stomp")
    #silent $ubuntu_packages.append("mcollective")
#end if
#set mlnx_mode=$getVar(\'mlnx_plugin_mode\',\'disabled\')
#if $mlnx_mode != "disabled"
    #silent $ubuntu_packages.append("mlnx-ofed-light")
#end if
in-target apt-get -y install #echo " ".join($ubuntu_packages)#; \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_puppet_config' :
  content => '#import late_command
#if $str($getVar(\'puppet_auto_setup\',\'\')) == "1"
in-target mkdir -p /etc/puppet /var/lib/hiera && \
in-target touch /var/lib/hiera/common.yaml /etc/puppet/hiera.yaml && \
in-target touch /var/log/puppet.log && \
in-target chmod 600 /var/log/puppet.log && \
    #if $getVar(\'puppet_master\',\'\') != \'\'
in-target $late_command.late_file("""[main]
    logdir = /var/log/puppet
    rundir = /var/run/puppet
    ssldir = $vardir/ssl
    pluginsync = true
[agent]
    classfile = $vardir/classes.txt
    localconfig = $vardir/localconfig
    server = %(puppet_master)s
    report = false
    configtimeout = 600
""" % {"puppet_master": $puppet_master},
    "/etc/puppet/puppet.conf", source_method="content") \
    #else
true \
    #end if
#end if
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_remove_repos_late' :
  content => '## Cleaning up sources.list.d/ and preferences.d/
rm -f /target/etc/apt/sources.list; \
rm -f /target/etc/apt/sources.list.d/*; \
rm -f /target/etc/apt/preferences; \
rm -f /target/etc/apt/preferences.d/*; \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_repos_late' :
  content => '#import json
## We assume ks_meta contains repo_setup variable
## Cleaning up sources.list
echo > /target/etc/apt/sources.list; \
mkdir -p /target/etc/apt/sources.list.d; \
mkdir -p /target/etc/apt/preferences.d; \
#set $repo_setup = json.loads($getVar("repo_setup"))
#set $repos = $repo_setup["repos"]
#for $repo in $repos
echo \'deb $repo["uri"] $repo["suite"] $repo["section"]\' > /target/etc/apt/sources.list.d/${repo["name"]}.list; \
#if not $repo.get("priority")
  #continue
#end if
echo \'Package: *\' > /target/etc/apt/preferences.d/$repo["name"]; \
echo \'Pin: release a=$repo["suite"]\' >> /target/etc/apt/preferences.d/$repo["name"]; \
echo \'Pin-Priority: $repo["priority"]\' >> /target/etc/apt/preferences.d/$repo["name"]; \
echo \'\' >> /target/etc/apt/preferences.d/$repo["name"]; \
#end for
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_static_net' :
  content => '#set $gw = $getVar(\'gw\',\'@@server@@\')
chroot /target /bin/bash -c \'echo H4sICDY4DFUAA3Rlc3Quc2gAhVNrj9JAFP1sf8Xd0qRg6M6yxhhXq6nQNURAA6zGUCRDe/sIMG1mhiUr8t+dPqCsj2z4MnPu7Zlz7j00LsgyYWRJRaz13FvnbjBdfPxmGx3N6Q37o8XQ6dpGU2AApiAeEI+RyASS8dQn/iZYJwzhF0QcM/DjNBW4SJhEHlI/x+luBdatZ4O5z7gqgHF9MFsVdf9WMUsOZv7zmAlv/82rbwO859s1CltXWKVl1rbnlZpjn3GSnPf5WwlWsAArvFa3GGkAVqel9UeTqTMYlK8noZ+yMIn+Q1F9dCLLlVqhImlAN0Z/BUkIO4QgBZZKoGuu+h8gpvcIQlKZ+FDRN1MO9VwE4kbAlpXFLcegpY3cqdPrje0mnKkyarFHhVb6BfTZlfV6vu+0Xxy8y6fPegtamlI6gwuwfiqPzYLJOG4BCEqfMJS7lK/ISaa4DIhSEkZW3VmJCGI/a+kwhzcgY2TaM1S7BwtBp1uZ1sweSwrDNYFaq6xm4zFP0iDgKAQY+8r/7Gp+yAuqbUPF6qxwXRaWPKWBT4U8K3XKUkQl7ugDGHWOdXj3pDv9pE7XwkRrOEFw3F4ePCiSp/lU/pXO8+xWkzlFtSrPbrZZhvxmbubndborz2WK1cBUkOt0kzzMJdg+Rbtq1AX5QSZ3HybfJ1N3aNuerix5etsDpzvtfx7liJpmgfTG/a/ueJJD75+XPdPpeF8N+5DjJNIr1gWpO+RDhkW5U2Cf3PHIHeR3lHFJNHKG7qPPDVLelF3Ecta5IVI4UjN+dWUp/yIREpm0lObLcp4N6CWCLtcICrMiZMipVP8SFZ+M471qBur7SaAOdA2jfhc4MrpJWKQVYTMb5nG3j997+cd7NXf18m84vWcx8gQAAA== | base64 -d | zcat > /tmp/createif.sh ; chmod +x /tmp/createif.sh ; /tmp/createif.sh $gw\' && \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/ubuntu_trusty_packages_late' :
  content => '#set $ubuntu_packages = ["acl", "openssh-server", "debconf-utils", "ntp", "ntpdate", "ruby-ipaddress", "ruby-netaddr", "ruby-openstack", "ruby-augeas", "ruby-stomp", "ruby-shadow", "ruby-json", "vim", "vlan", "curl", "anacron", "python-amqp", "nailgun-agent", "nailgun-mcagents", "lvm2", "nailgun-net-check", "puppet", "telnet", "gdisk", "daemonize", "rsync", "virt-what", "xfsprogs" ]
#if $str($getVar(\'mco_auto_setup\',\'\')) == "1"
    #silent $ubuntu_packages.append("ruby-stomp")
    #silent $ubuntu_packages.append("mcollective")
#end if
#set mlnx_mode=$getVar(\'mlnx_plugin_mode\',\'disabled\')
#if $mlnx_mode != "disabled"
    #silent $ubuntu_packages.append("mlnx-ofed-light")
#end if
in-target apt-get -y install #echo " ".join($ubuntu_packages)#; \
',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/cobbler/snippets/url_proxy' :
  content => '## add proxy to initial installation process if it defined in cobbler
#if $getVar("proxy","") != ""
url --proxy $proxy --url=$tree
#else
url --url=$tree
#end if',
  group   => 'root',
  mode    => '0644',
  notify  => Exec[cobbler_sync],
  owner   => 'root',
  require => Package[cobbler],
}

file { '/var/lib/fuel/keys/master/cobbler//cobbler.cnf' :
  ensure  => 'present',
  content => '# file managed by puppet
#
# SSLeay example configuration file.
#

# This definition stops the following lines choking if HOME isn\'t
# defined.
HOME                    = .
RANDFILE                = $ENV::HOME/.rnd

[ req ]
default_bits            = 2048
default_md              = sha256
default_keyfile         = privkey.pem
distinguished_name      = req_distinguished_name
prompt                  = no

[ req_distinguished_name ]
countryName                     = US
stateOrProvinceName             = California
organizationName                = Fuel
organizationalUnitName          = Fuel Deployment Team
commonName                      = fuel.domain.tld
emailAddress                    = root@test.domain.local



',
  group   => 'root',
  owner   => 'root',
}

file { '/var/lib/fuel/keys/master/cobbler//cobbler.crt' :
  ensure  => 'present',
  group   => 'root',
  owner   => 'root',
  require => X509_cert[/var/lib/fuel/keys/master/cobbler//cobbler.crt],
}

file { '/var/lib/fuel/keys/master/cobbler//cobbler.csr' :
  ensure  => 'present',
  group   => 'root',
  owner   => 'root',
  require => X509_request[/var/lib/fuel/keys/master/cobbler//cobbler.csr],
}

file { '/var/lib/fuel/keys/master/cobbler//cobbler.key' :
  ensure  => 'present',
  group   => 'root',
  mode    => '0600',
  owner   => 'root',
  require => Ssl_pkey[/var/lib/fuel/keys/master/cobbler//cobbler.key],
}

file { '/var/lib/fuel/keys/master/cobbler' :
  ensure => 'directory',
}

file { '/var/lib/fuel/keys/master' :
  ensure => 'directory',
}

file { '/var/lib/fuel/keys' :
  ensure => 'directory',
}

file { '/var/lib/fuel' :
  ensure => 'directory',
}

file { '/var/www/cobbler/aux/send2syslog.py' :
  ensure  => 'link',
  require => [ Class[Cobbler::Server], Package[send2syslog] ],
  target  => '/usr/bin/send2syslog.py',
}

file_line { 'yum retries' :
  after => '\[main\]',
  line  => 'retries=5',
  path  => '/etc/yum.conf',
}

file_line { 'yum timeout' :
  after => '\[main\]',
  line  => 'timeout=5',
  path  => '/etc/yum.conf',
}

node { 'default' :
}

openssl::certificate::x509 { 'cobbler' :
  ensure       => 'present',
  altnames     => [  ],
  base_dir     => '/var/lib/fuel/keys/master/cobbler/',
  cnf_tpl      => 'openssl/cert.cnf.erb',
  commonname   => 'fuel.domain.tld',
  country      => 'US',
  days         => '3650',
  email        => 'root@test.domain.local',
  force        => false,
  group        => 'root',
  key_mode     => '0600',
  notify       => Service[httpd],
  organization => 'Fuel',
  owner        => 'root',
  require      => File[/var/lib/fuel/keys/master/cobbler],
  state        => 'California',
  unit         => 'Fuel Deployment Team',
}

package { 'bind-utils' :
}

package { 'cobbler-web' :
  require => Package[cobbler],
}

package { 'cobbler' :
  require => [ Package[dnsmasq], Package[xinetd], Package[tftp-server], Package[syslinux], Package[wget], Package[python-ipaddr], Package[fence-agents], Package[bind-utils], Package[python-django] ],
}

package { 'dnsmasq' :
  ensure => 'installed',
}

package { 'fence-agents' :
}

package { 'openssh-clients' :
  ensure => 'installed',
}

package { 'pexpect' :
  ensure => 'installed',
}

package { 'python-django' :
  ensure => 'present',
}

package { 'python-ipaddr' :
}

package { 'send2syslog' :
  ensure => 'installed',
}

package { 'syslinux' :
}

package { 'tftp-server' :
}

package { 'wget' :
}

package { 'xinetd' :
}

service { 'cobblerd' :
  ensure     => 'running',
  before     => 'Exec[cobbler_sync]',
  enable     => true,
  hasrestart => true,
  require    => Package[cobbler],
}

service { 'dnsmasq' :
  ensure     => 'running',
  enable     => true,
  hasrestart => true,
  require    => Package[dnsmasq],
  subscribe  => Exec[cobbler_sync],
}

service { 'httpd' :
  ensure     => 'running',
  enable     => true,
  hasrestart => true,
  require    => Package[cobbler-web],
}

service { 'xinetd' :
  ensure     => 'running',
  enable     => true,
  hasrestart => true,
  require    => [ Package[xinetd], Package[tftp-server], Package[syslinux], Package[wget], Package[python-ipaddr], Package[fence-agents], Package[bind-utils] ],
}

ssl_pkey { '/var/lib/fuel/keys/master/cobbler//cobbler.key' :
  ensure => 'present',
}

stage { 'main' :
}

x509_cert { '/var/lib/fuel/keys/master/cobbler//cobbler.crt' :
  ensure      => 'present',
  days        => '3650',
  force       => false,
  private_key => '/var/lib/fuel/keys/master/cobbler//cobbler.key',
  req_ext     => false,
  require     => File[/var/lib/fuel/keys/master/cobbler//cobbler.cnf],
  template    => '/var/lib/fuel/keys/master/cobbler//cobbler.cnf',
}

x509_request { '/var/lib/fuel/keys/master/cobbler//cobbler.csr' :
  ensure      => 'present',
  force       => false,
  private_key => '/var/lib/fuel/keys/master/cobbler//cobbler.key',
  require     => File[/var/lib/fuel/keys/master/cobbler//cobbler.cnf],
  template    => '/var/lib/fuel/keys/master/cobbler//cobbler.cnf',
}

